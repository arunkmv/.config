#+TITLE: My Doom Emacs config

#+HTML:<div align=center><p><img alt="Emacs Logo" width="150" height="150" src="emacs_logo.png"></p></div>

* Global
** General

#+begin_src emacs-lisp
(setq
 doom-font (font-spec :family "Source Code Pro for Powerline" :size 17 :weight 'Regular)
 doom-theme 'doom-gruvbox-mod
 default-directory "~"
 display-line-numbers-type 'relative
 doom-modeline-buffer-encoding nil
 display-time-default-load-average nil)
 ;;+doom-dashboard-banner-file (expand-file-name "emacs_logo.png" doom-private-dir))
#+end_src

** Battery and time

Display battery and time in modeline
#+begin_src emacs-lisp
(display-battery-mode 1)
(display-time-mode 1)
#+end_src

** Startup

Maximized screen on startup, keeping this here for later
#+begin_src emacs-lisp
;;(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

Fullscreen on startup
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

** Treemacs

Use default treemacs theme instead of the doom-atom theme
#+begin_src emacs-lisp
(when (featurep! :ui treemacs)
  (remove-hook 'doom-load-theme-hook #'doom-themes-treemacs-config))
#+end_src

** Dired

Change dired's default behaviour of creating new buffers
#+begin_src emacs-lisp
(map!
 :map dired-mode-map
 :n "-" (lambda () (interactive) (find-alternate-file "..")))
#+end_src

** Projectile

Keep projectile from adding new projects everytime a directory is opened
#+begin_src emacs-lisp
(setq projectile-track-known-projects-automatically nil)
#+end_src

** Dashboard

Hide cursor and turn off line highlighting in dashboard
#+begin_src emacs-lisp
(setq-hook! '+doom-dashboard-mode-hook hl-line-mode -1)
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

Hide the dashboard menu
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src

*** Fancy splash image

Fancy splash image yanked from [[https://github.com/tecosaur/emacs-config/blob/master/config.org#splash-screen][here]]
#+begin_src emacs-lisp
(defvar fancy-splash-image-template
  (expand-file-name "emacs-e-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")

(defvar fancy-splash-sizes
  `((:height 300 :min-height 50 :padding (0 . 2))
    (:height 250 :min-height 42 :padding (2 . 4))
    (:height 200 :min-height 35 :padding (3 . 3))
    (:height 150 :min-height 28 :padding (3 . 3))
    (:height 100 :min-height 20 :padding (2 . 2))
    (:height 75  :min-height 15 :padding (2 . 1))
    (:height 50  :min-height 10 :padding (1 . 0))
    (:height 1   :min-height 0  :padding (0 . 0)))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
   described by `fancy-splash-template-colours' for the current theme"
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
    (re-search-forward "$width" nil t)
    (replace-match (number-to-string height) nil nil)
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (while (re-search-forward (car substitution) nil t)
        (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src

** Modeline

Key bindings to toggle modeline
#+begin_src emacs-lisp
(map! :leader
      :desc "Modeline" :n "tm"
      #'doom-modeline-mode)
#+end_src

* Prog mode
** Python

#+begin_src emacs-lisp
(setq lsp-log-io t
      lsp-python-ms-extra-paths ["./src/python" "./configs"])

(after! python
  (setq conda-env-home-directory (expand-file-name "~/.conda"))
  (custom-set-variables
   '(conda-anaconda-home (getenv "CONDA_HOME"))))
#+end_src

** C/C++

#+begin_src emacs-lisp
(after! lsp-clients
  (set-lsp-priority! 'clangd 1))  ; ccls has priority 0

(setq lsp-clients-clangd-args '("-j=3"
                                "--background-index"
                                "--clang-tidy"
                                "--completion-style=detailed"
                                "--header-insertion=never"))
#+end_src

* Org mode

Set the default org directory
#+begin_src emacs-lisp
(setq org-directory "~/Org/")
#+end_src

** Org agenda niceties

Customize todo keywords
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "PARKED(p)" "|" "DONE(d)" "KILLED(k)")))
  
  (with-no-warnings
    (custom-declare-face '+org-todo-todo `((t (:foreground "#fabd2f" :inherit (bold-italic org-todo)))) "")
    (custom-declare-face '+org-todo-inprogress `((t (:foreground "#d3869b" :inherit (bold-italic org-todo)))) "")
    (custom-declare-face '+org-todo-parked `((t (:foreground "#fe8019" :inherit (bold-italic org-todo)))) "")
    (custom-declare-face '+org-todo-done `((t (:foreground "#b8bb26" :inherit (bold-italic org-todo)))) "")
    (custom-declare-face '+org-todo-killed `((t (:foreground "#fb4934" :inherit (bold-italic org-todo)))) ""))

  (setq org-todo-keyword-faces
        '(("TODO" . +org-todo-todo)
          ("INPROGRESS" . +org-todo-inprogress)
          ("PARKED" . +org-todo-parked)
          ("DONE" . +org-todo-done)
          ("KILLED" . +org-todo-killed))))
#+end_src

Fancy priority icons
#+begin_src emacs-lisp
(use-package! org-fancy-priorities
  :hook (org-mode . org-fancy-priorities-mode)
  :hook (org-agenda-mode . org-fancy-priorities-mode)
  :config (setq org-fancy-priorities-list '("■" "■" "■")))
#+end_src

Right align org tags
#+begin_src emacs-lisp
(after! org
  (setq org-tags-column 60))
#+end_src

**** TODO Figure out why doom-color does not work for custom org todo faces

** Zotero integration

Configure zotxt-emacs for better zotero integration
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook 'org-zotxt-mode)
(after! org
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs)))

(defun org-zotxt-insert-current-selection ()
  "Insert reference link for the currently selected item in Zotero"
  (interactive)
  (org-zotxt-insert-reference-link 4))

(map! :map org-mode-map
      :localleader
      (:prefix ("z" . "zotero")
       :desc "Link to selected item" "i" #'org-zotxt-insert-current-selection
       :desc "Link to an item"       "I" #'org-zotxt-insert-reference-link
       :desc "Open link"             "a" #'org-zotxt-open-attachment))
#+end_src

** LaTeX and Beamer export

Setup latex and beamer export
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook 'org-beamer-mode)
(require 'ox-latex)

(setq org-latex-listings t)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))
#+end_src

* Term + Shell
** vterm

Set default vterm shell
#+begin_src emacs-lisp
 (setq vterm-shell "/bin/zsh")
#+end_src

Browse shell history in vterm
#+begin_src emacs-lisp
(map!
 :map vterm-mode-map
 :n "-" #'vterm-send-up
 :n "=" #'vterm-send-down)
#+end_src

** zsh environment quick edit

Key bindings to edit the .zshrc and .env files
#+begin_src emacs-lisp
(map! :leader
      :desc "Edit .env" :n "fv"
      (lambda ()
          (interactive)
          (find-file-other-window (expand-file-name "~/.env")))
      :desc "Edit .zshrc" :n "fz"
      (lambda ()
          (interactive)
          (find-file-other-window (expand-file-name "../zsh/.zshrc" doom-private-dir))))
#+end_src
