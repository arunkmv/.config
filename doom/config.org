#+title:Doom Emacs config
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args :tangle no :results silent :eval no-export
#+html:<div align=center><p><img alt="Emacs Logo" width="150" height="150" src="emacs_logo.svg"></p></div>

This is my literate configuration for Doom Emacs. This file generates config.el, init.el and packages.el. Please run the following to generate these files when initially setting up.

#+begin_src shell :tangle no
emacs --batch --eval "(progn (require 'org) (setq org-confirm-babel-evaluate nil) (org-babel-tangle-file \"~/.config/doom/config.org\"))"
#+end_src

* Doom configuration
** Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
A literate init.el. This provides modular configurability for Doom. Lets you enable and install supported packages and tweak their functionalities with flags.
#+name: init.el
#+attr_html: :collapsed t
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments no
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src

*** Completion
#+name: doom-completion
#+begin_src emacs-lisp
company           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
(ivy +prescient +icons)               ; a search engine for love and life
#+end_src

*** UI
#+name: doom-ui
#+begin_src emacs-lisp
deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
;;(emoji +unicode)  ; ðŸ™‚
;;fill-column       ; a `fill-column' indicator
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
;;ligatures         ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
treemacs          ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages
vc-gutter         ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
;;window-select     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
;;zen               ; distraction-free coding or writing
#+end_src

*** Editor
#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
format  ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
word-wrap         ; soft wrapping with language-aware indent
#+end_src

*** Emacs
#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)            ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
;;ibuffer         ; interactive buffer management
(undo +tree)              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

*** Term
#+name: doom-term
#+begin_src emacs-lisp
eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src

*** Checkers
#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
;;(spell +flyspell) ; tasing you for misspelling mispelling
;;grammar           ; tasing grammar mistake every you make
#+end_src

*** Tools
#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
(lookup +dictionary)              ; navigate your code and its documentation
lsp
magit             ; a git porcelain for Emacs
make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

*** OS support
#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)  ; improve compatibility with macOS
;;tty               ; improve the terminal Emacs experience
#+end_src

*** Language support
#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
(cc +lsp)                ; C/C++/Obj-C madness
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(haskell +dante)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
;;json              ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
latex             ; writing papers in Emacs has never been so fun
;;lean
;;factor
;;ledger            ; an accounting system in Emacs
;;lua               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +roam
     +noter)               ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python +lsp)           ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
(scala +lsp)             ; java, but good
;;scheme            ; a fully conniving family of lisps
sh                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
;;yaml              ; JSON, but readable
#+end_src

*** Other things
Email
#+name: doom-email
#+begin_src emacs-lisp
;;(mu4e +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src

Apps
#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

Configuration
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

** Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments no
:END:
A literate packages.el. This file is used to declare external packages. Declaritions done are beside packages configurations, [[*Beacon][like so]].
#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src

* General
#+begin_src emacs-lisp
(setq default-directory "~"
      locale-coding-system 'utf-8-unix
      mouse-wheel-tilt-scroll 't)

(custom-set-faces! `(link :foreground ,(doom-color 'violet) :weight bold :underline t ))
#+end_src

** Widows and buffers
Keybindings for convenient buffer and window manipulation
#+begin_src emacs-lisp
(map! :leader
      :desc "Switch workspace buffer other window" :n "bw" #'+ivy/switch-workspace-buffer-other-window
      :desc "Switch buffer other window" :n "bW" #'+ivy/switch-buffer-other-window
      :desc "Kill buffer and window" :n "bD" #'kill-buffer-and-window)
#+end_src

Split windows vertically by default
#+begin_src emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src

** Popups
Don't use popup system for info-mode.
#+begin_src emacs-lisp
(set-popup-rule! "^\\*info\\*$" :ignore t)
#+end_src

** Dictionary lookup
Functions to lookup random words in the dictionary definitions and synonyms
#+begin_src emacs-lisp
(defun ak/dictionary-definition-prompt (identifier &optional arg)
  "Look up the definition of any word."
  (interactive
   (list (read-string "Look up in dictionary: ")
         current-prefix-arg))
  (message "Looking up dictionary definition for %S" identifier)
  (cond ((and IS-MAC (require 'osx-dictionary nil t))
         (osx-dictionary--view-result identifier))
        ((and +lookup-dictionary-prefer-offline
              (require 'wordnut nil t))
         (unless (executable-find wordnut-cmd)
           (user-error "Couldn't find %S installed on your system"
                       wordnut-cmd))
         (wordnut-search identifier))
        ((require 'define-word nil t)
         (define-word identifier nil arg))
        ((user-error "No dictionary backend is available"))))

(map! :leader
      :desc "Dictionary (w/ prompt)" :n "sx" #'ak/dictionary-definition-prompt)
#+end_src

* UI
** Appearance
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro for Powerline" :size 21 :weight 'Regular)
      doom-theme 'doom-gruvbox-mod
      display-line-numbers-type 'relative
      display-time-default-load-average nil)

(doom/reload-theme)
#+end_src

*** Full screen
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

*** Dashboard
Hide cursor and turn off line highlighting in dashboard
#+begin_src emacs-lisp
(setq-hook! '+doom-dashboard-mode-hook hl-line-mode -1)
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

Hide the dashboard menu
#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src

**** Splash image
Fancy splash image yanked from [[https://github.com/tecosaur/emacs-config/blob/master/config.org#splash-screen][here]]
#+begin_src emacs-lisp
(defvar fancy-splash-image-template
  (expand-file-name "emacs-e-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")

(defvar fancy-splash-sizes
  `((:height 300 :min-height 50 :padding (0 . 2))
    (:height 250 :min-height 42 :padding (2 . 4))
    (:height 200 :min-height 35 :padding (3 . 3))
    (:height 150 :min-height 28 :padding (3 . 3))
    (:height 100 :min-height 20 :padding (2 . 2))
    (:height 75  :min-height 15 :padding (2 . 1))
    (:height 50  :min-height 10 :padding (1 . 0))
    (:height 1   :min-height 0  :padding (0 . 0)))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
   described by `fancy-splash-template-colours' for the current theme"
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
    (re-search-forward "$width" nil t)
    (replace-match (number-to-string height) nil nil)
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (while (re-search-forward (car substitution) nil t)
        (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src

** Modeline
#+begin_src emacs-lisp
(setq doom-modeline-buffer-encoding nil
      doom-modeline-major-mode-icon t
      doom-modeline-modal-icon nil)
#+end_src

Key binding to toggle modeline
#+begin_src emacs-lisp
(map! :leader
      :desc "Modeline" :n "tm"
      #'doom-modeline-mode)
#+end_src

*** Evil state indicators
Change faces of evil indicators
#+begin_src emacs-lisp
(custom-set-faces!
  `(doom-modeline-evil-emacs-state :background ,(doom-color 'violet) :foreground ,(doom-color 'base0))
  `(doom-modeline-evil-normal-state :background ,(doom-color 'green) :foreground ,(doom-color 'base0))
  `(doom-modeline-evil-insert-state :background ,(doom-color 'dark-blue) :foreground ,(doom-color 'fg))
  `(doom-modeline-evil-visual-state :background ,(doom-color 'orange) :foreground ,(doom-color 'base0))
  `(doom-modeline-evil-motion-state :background ,(doom-color 'red) :foreground ,(doom-color 'fg))
  `(doom-modeline-evil-operator-state :background ,(doom-color 'yellow) :foreground ,(doom-color 'base0))
  `(doom-modeline-evil-replace-state :background ,(doom-color 'magenta) :foreground ,(doom-color 'fg)))
#+end_src

*** Battery and time
Display battery and time in modeline
#+begin_src emacs-lisp
(display-battery-mode 1)
(display-time-mode 1)
#+end_src

*** TODO Change `doom-modeline-buffer-file-name' based on window size

** Beacon
Beacon to never lose my cursor again
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! beacon)
#+end_src

#+begin_src emacs-lisp
(use-package! beacon
  :hook (doom-after-init-modules . beacon-mode)
  :config
  (after! doom-themes
    (setq beacon-color (doom-color 'orange))))
#+end_src

* Tools
** Treemacs
#+begin_src emacs-lisp
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

** Dired
Change dired's default behaviour of creating new buffers and use vim like keybindings
#+begin_src emacs-lisp
(after! dired
  (map! :map dired-mode-map
        :desc "Go to parent directory" :n "h" (lambda () (interactive) (find-alternate-file ".."))
        :desc "Go to current entry" :n "l" #'dired-find-alternate-file
        :desc "Kill marked lines" :n "K" #'dired-do-kill-lines
        :desc "Goto home directory" :n "gh" (lambda () (interactive) (find-alternate-file (getenv "HOME"))))
  (setq dired-listing-switches "-agho --group-directories-first"))
#+end_src

*** Dired open
Dired open for easily opening files
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! dired-open)
#+end_src

Configure dired-open for commonly opened file types
#+begin_src emacs-lisp
(use-package! dired-open
  :commands (dired)
  :config
  (setq dired-open-extensions '(("vcd" . "gtkwave"))))
#+end_src

** Projectile
Keep projectile from adding new projects everytime a directory is opened
#+begin_src emacs-lisp
(setq projectile-track-known-projects-automatically nil)
#+end_src

** mu4e
Add mu4e to load path
#+begin_src emacs-lisp
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src

Configure mu4e
#+begin_src emacs-lisp
;; (set-email-account! "gmail"
;;   '((mu4e-sent-folder       . "/gmail/Sent Mail")
;;     (mu4e-drafts-folder     . "/gmail/Drafts")
;;     (mu4e-trash-folder      . "/gmail/Trash")
;;     (mu4e-refile-folder     . "/gmail/All Mail")
;;     (smtpmail-smtp-user     . "arunkumarmv1997@gmail.com")
;;     (user-mail-address      . "arunkumarmv1997@gmail.com")    ;; only needed for mu < 1.4
;;     (mu4e-compose-signature . "---\nArunkumar M V"))
;;   t)
#+end_src

** Evil mode
Pin evil-collection to resolve [[https://github.com/hlissner/doom-emacs/issues/5454][this]] issue
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! evil-collection :pin "47bc8571a6105d7cf61b7fd0fce4a87f8c2c4725")
#+end_src

Evil vim state indicators
#+begin_src emacs-lisp
(after! evil
  (setq-default
   evil-emacs-state-tag          " E "
   evil-normal-state-tag         " N "
   evil-insert-state-tag         " I "
   evil-visual-char-tag          " V "
   evil-visual-line-tag          " VL "
   evil-visual-screen-line-tag   " VSL "
   evil-visual-block-tag         " VB "
   evil-motion-state-tag         " M "
   evil-operator-state-tag       " O "
   evil-replace-state-tag        " R "))
#+end_src
** Document utilities
*** PDF tools
Open in midnight dark mode
#+begin_src emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
(setq-default pdf-view-display-size 'fit-page)
#+end_src

Key bindings to scroll to horizontal extremes when zoomed in
#+begin_src emacs-lisp
(map! :map pdf-view-mode-map
      :desc "Scroll to extreme left of page" :n "C-c h" (lambda ()
                                                          (interactive)
                                                          (image-bol 1))
      :desc "Scroll to extreme right of page" :n "C-c l" (lambda ()
                                                           (interactive)
                                                           (image-eol 1)))
#+end_src

Key bindings to move forward and back in pdf history
#+begin_src emacs-lisp
(map! :map pdf-view-mode-map
      :desc "Forward" :n "ghf" #'pdf-history-forward
      :desc "Backward" :n "ghb" #'pdf-history-backward)
#+end_src

*** Nov
Nov.el for reading EPUBs
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! nov)
#+end_src

Configure nov-mode. Open epubs with nov, set font and column width.
#+begin_src emacs-lisp
(use-package! nov
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

  (defun ak/nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "Bookerley"
                             :height 1.0))

  (add-hook 'nov-mode-hook 'ak/nov-font-setup)
  (setq nov-text-width 80))
#+end_src
*** Markdown
**** Polymode markdown
For markdown syntax highlighting
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! poly-markdown :pin "1536cf0c32f71d5cd05c90f7905905e38006e95d")
#+end_src

* Completion frameworks
** Ivy
*** Ivy Bibtex
Ivy-bibtex and bibtex completion for easily interacting with Zotero library. Also used by org-ref and org-roam-bibtex
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! ivy-bibtex)
#+end_src

Set defaults
#+begin_src emacs-lisp
(after! ivy-bibtex
  (setq bibtex-completion-notes-path ak-org-notes-directory
        bibtex-completion-bibliography ak-zotero-bib-file
        bibtex-completion-pdf-field "file"
        bibtex-completion-edit-notes-function (lambda (keys)
                                                (orb-edit-notes (car keys)))))
#+end_src

Keybinding to open ivy-bibtex
#+begin_src emacs-lisp
(after! ivy-bibtex
  (map! :leader
        :desc "Ivy-bibtex" :n "ob"
        #'ivy-bibtex))
#+end_src

** Company
Increase minimum prefix length
#+begin_src emacs-lisp
(after! company
  (setq company-minimum-prefix-length 3))
#+end_src

* Prog mode
** LSP mode
Disable doc on cursor hover
#+begin_src emacs-lisp
(setq lsp-log-io nil)
(add-hook 'lsp-ui-doc-mode-hook
            (lambda ()
              (when lsp-ui-doc-mode
                (remove-hook 'post-command-hook #'lsp-ui-doc--make-request t))))
#+end_src

Key binding to format buffer
#+begin_src emacs-lisp
(map! :leader
      :desc "Format buffer" :n "cf" #'lsp-format-buffer)
#+end_src

Key bindings to glance doc
#+begin_src emacs-lisp
(map! :map lsp-ui-doc-mode-map
      :desc "+lsp/hover" :n "gh" #'lsp-ui-doc-glance)
#+end_src

** GDB
#+begin_src emacs-lisp
(setq gdb-show-main t
      gdb-many-windows t)
#+end_src

** Python
Configure mspyls
#+begin_src emacs-lisp
(setq lsp-python-ms-extra-paths ["./src/python" "./configs"])
#+end_src

Use format-all for python to format with Black
#+begin_src emacs-lisp
(add-hook 'python-mode-hook #'format-all-mode)
#+end_src

** C/C++
#+begin_src emacs-lisp
#+end_src

** Scala
Always open sbt buffer as popup and add keybinding
#+begin_src emacs-lisp
(after! sbt-mode
  (set-popup-rule! "^\\*sbt" :vslot -5 :size 0.35 :select t :modeline nil :quit nil :ttl nil))
#+end_src

Function to toggle the sbt buffer popup
#+begin_src emacs-lisp
(defun ak/sbt-toggle()
  "Toggle sbt buffer popup window or create a new one if none exists"
  (interactive)
  (let* ((project-root (or (sbt:find-root)
                           (error "Could not find project root, type `C-h f sbt:find-root` for help.")))
         (buffer-name (sbt:buffer-name))
         (window (get-buffer-window buffer-name)))
    (if-let (win (get-buffer-window buffer-name))
        (delete-window win)
      (sbt-start))))

(after! scala-mode
  (map! :map scala-mode-map
        :leader
        :desc "Run sbt" :n "os" #'ak/sbt-toggle))
#+end_src

Add hook to format buffer before saving scala files
#+begin_src emacs-lisp
(add-hook 'scala-mode-hook
  (lambda ()
    (add-hook 'before-save-hook 'lsp-format-buffer nil 'make-it-local)))
#+end_src
** Firrtl mode
For easily reading FIRRTL files emmited by Chisel
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! firrtl-mode)
#+end_src

* Org mode
#+begin_src emacs-lisp
(after! org
  (setq org-startup-folded 'content)
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs)))
#+end_src

Right align org tags
#+begin_src emacs-lisp
(setq org-tags-column 60)
#+end_src

** Directories and files
#+begin_src emacs-lisp
(setq org-directory (concat (getenv "HOME") "/Org")
      ak-org-notes-directory (concat org-directory "/notes")
      ak-zotero-bib-file (concat (getenv "HOME") "/Documents/Zotero/references.bib"))
#+end_src

Capture files
#+begin_src emacs-lisp
(setq todo-capture-file (concat org-directory "/todo.org"))
#+end_src

Use files for org-agneda
#+begin_src emacs-lisp
(setq org-agenda-files (list todo-capture-file))
#+end_src

** Org agenda
Customize todo keywords
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "PARKED(p)" "|" "DONE(d)" "KILLED(k)")))

  (defface +org-todo-todo '((t)) "Face for org todo keyword TODO")
  (defface +org-todo-inprogress '((t)) "Face for org todo keyword INPROGRESS")
  (defface +org-todo-parked '((t)) "Face for org todo keyword PARKED")
  (defface +org-todo-done '((t)) "Face for org todo keyword DONE")
  (defface +org-todo-killed '((t)) "Face for org todo keyword KILLED")

  (custom-set-faces!
    `(+org-todo-todo :foreground ,(doom-color 'yellow) :inherit (bold-italic org-todo))
    `(+org-todo-inprogress :foreground ,(doom-color 'violet) :inherit (bold-italic org-todo))
    `(+org-todo-parked :foreground ,(doom-color 'orange) :inherit (bold-italic org-todo))
    `(+org-todo-done :foreground ,(doom-color 'green) :inherit (bold-italic org-todo))
    `(+org-todo-killed :foreground ,(doom-color 'red) :inherit (bold-italic org-todo)))

  (setq org-todo-keyword-faces
        '(("TODO" . +org-todo-todo)
          ("INPROGRESS" . +org-todo-inprogress)
          ("PARKED" . +org-todo-parked)
          ("DONE" . +org-todo-done)
          ("KILLED" . +org-todo-killed))))
#+end_src

*** Fancy org-mode priorities
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-fancy-priorities)
#+end_src

Fancy priority icons
#+begin_src emacs-lisp
(use-package! org-fancy-priorities
  :hook (org-mode . org-fancy-priorities-mode)
  :hook (org-agenda-mode . org-fancy-priorities-mode)
  :config (setq org-fancy-priorities-list '("â– " "â– " "â– ")))
#+end_src

** Org capture
Doct for declarative org capture templates
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! doct)
#+end_src

Capture templates using doct
#+begin_src emacs-lisp
(use-package! doct
  :commands (doct))

(after! org-capture
  (setq org-capture-templates
        (doct `(("Tasks" :keys "t"
                   :file todo-capture-file
                   :prepend t
                   :headline "Tasks"
                   :type entry
                   :template ("* TODO %? %^g%{extra}"
                              "%i %a")
                   :children (("General Task" :keys "t"
                               :extra "")
                              ("Task with deadline" :keys "d"
                               :extra "\nDEADLINE: %^{Deadline:}t")
                              ("Scheduled Task" :keys "s"
                               :extra "\nSCHEDULED: %^{Start time:}t")))
                ("Web resource" :keys "w"
                 :file todo-capture-file
                 :prepend t
                 :type entry
                 :template "* TODO [[%^{URL}][%^{Title}]]%? :%{url-type}:"
                 :children (("Article" :keys "a"
                             :headline "Articles"
                             :url-type "article")
                            ("Video" :keys "v"
                             :headline "Videos"
                             :url-type "video")
                            ("Webpage" :keys "w"
                             :headline "Webpage"
                             :url-type "web")))
                ("Note" :keys "n"
                 :file todo-capture-file
                 :prepend t
                 :headline "Notes"
                 :type entry
                 :template ("* %?"
                            "%i %a"))))))
#+end_src

** Deft
#+begin_src emacs-lisp
(after! deft
  (setq deft-directory org-directory
        deft-recursive t))
#+end_src

** Org ref
Org ref for easy reference management in org files
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-ref)
#+end_src

Require org-ref and set defaults
#+begin_src emacs-lisp
(require 'org-ref) ;For some reason `use-package!' does not work for org-ref, TODO Figure out why
(setq org-ref-open-pdf-function 'org-ref-open-pdf-at-point
      org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
      org-ref-notes-directory ak-org-notes-directory
      org-ref-default-bibliography ak-zotero-bib-file
      org-ref-cite-onclick-function 'org-ref-cite-click-helm
      org-ref-notes-function 'orb-edit-notes)
#+end_src

Remap refile keys for more convenient org-ref keymap
#+begin_src emacs-lisp
(map! :map org-mode-map
      :localleader
      "r" nil
      (:prefix ("R" . "refile")
       "." #'+org/refile-to-current-file
       "c" #'+org/refile-to-running-clock
       "l" #'+org/refile-to-last-location
       "f" #'+org/refile-to-file
       "o" #'+org/refile-to-other-window
       "O" #'+org/refile-to-other-buffer
       "v" #'+org/refile-to-visible
       "r" #'org-refile) ; to all `org-refile-targets'
      (:prefix ("r" . "org-ref")
       :desc "Insert citation"       "i" #'org-ref-helm-insert-cite-link
       :desc "Insert reference link" "r" #'org-ref-helm-insert-ref-link
       :desc "Insert label link"     "l" #'org-ref-helm-insert-label-link
       :desc "Open citation PDF"     "o" #'org-ref-open-pdf-at-point))
#+end_src

** Org roam
Setup org roam
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-directory ak-org-notes-directory)
  (custom-set-faces! `(org-roam-link :foreground ,(doom-color 'violet) :weight bold :slant italic :underline t))
#+end_src

Prevent org roam from downcasing slug titles for better integration with org-roam-bibtex and org-noter (pdf filename = note filename = citekey)
#+begin_src emacs-lisp
  (defun ak/org-roam--title-to-slug-without-downcasing (title)
    "Convert TITLE to a filename-suitable slug (without downcasing)."
    (cl-flet* ((nonspacing-mark-p (char)
                                  (memq char org-roam-slug-trim-chars))
               (strip-nonspacing-marks (s)
                                       (ucs-normalize-NFC-string
                                        (apply #'string (seq-remove #'nonspacing-mark-p
                                                                    (ucs-normalize-NFD-string s)))))
               (cl-replace (title pair)
                           (replace-regexp-in-string (car pair) (cdr pair) title)))
      (let* ((pairs `(("[^[:alnum:][:digit:]]" . "_")  ;; convert anything not alphanumeric
                      ("__*" . "_")  ;; remove sequential underscores
                      ("^_" . "")  ;; remove starting underscore
                      ("_$" . ""))))  ;; remove ending underscore
             (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs))))

  (setq org-roam-title-to-slug-function #'ak/org-roam--title-to-slug-without-downcasing))
#+end_src

*** Org-roam-bibtex
For better org-roam integration
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-roam-bibtex :pin "80a86980801ff233d7c12ae9efef589ffa53df67")
#+end_src

Setup org-roam-bibtex
#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq orb-preformat-keywords
   '("citekey" "title" "file" "author"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head "#+TITLE: ${title}\n#+ROAM_KEY: ${ref}

- tags ::

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${citekey}\n  :AUTHOR: ${author}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")\n  :NOTER_PAGE: \n  :END:\n\n"

           :unnarrowed t))))
#+end_src

** Org noter
Defaults for org noter
#+begin_src emacs-lisp
(after! org-noter
  (setq org-noter-notes-window-location 'vertical-split
        org-noter-doc-split-fraction '(0.2 . 0.8)
        org-noter-hide-other nil
        org-noter-always-create-frame nil
        org-noter-notes-search-path (list ak-org-notes-directory)
        org-noter-separate-notes-from-heading nil)

  (map! :map org-noter-doc-mode-map
        :leader
        :localleader
        :desc "Insert note" :n "i" #'org-noter-insert-note
        :desc "Insert precise note" :n "p" #'org-noter-insert-precise-note
        :desc "Go to previous note" :n "k" #'org-noter-sync-prev-note
        :desc "Go to next note" :n "j" #'org-noter-sync-next-note
        :desc "Create skeleton" :n "s" #'org-noter-create-skeleton
        :desc "Kill session" :n "q" #'org-noter-kill-session))
#+end_src

** LaTeX and Beamer export
Setup latex and beamer export
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook 'org-beamer-mode)

(require 'ox-latex)
(setq org-latex-listings t)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))

(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "pdflatex -interaction nonstopmode -output-directory %o %f"
        "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Org-tree-slide
For presenting org-mode files
#+begin_src emacs-lisp :tangle "packages.el" :comments no
(package! org-tree-slide)
#+end_src

#+begin_src emacs-lisp
(use-package! org-tree-slide)
#+end_src

* Terminals and shells
** vterm
Set default vterm shell
#+begin_src emacs-lisp
(setq vterm-shell "/bin/zsh")
#+end_src

Browse shell history in vterm
#+begin_src emacs-lisp
(map! :map vterm-mode-map
      :n   "-" #'vterm-send-up
      :n   "=" #'vterm-send-down
      :niv "C-c C-k" #'vterm-previous-prompt
      :niv "C-c C-j" #'vterm-next-prompt)
#+end_src

*** TODO Vterm Ivy mode

** zsh environment quick edit
Key bindings to edit the .zshrc and .env files
#+begin_src emacs-lisp
(map! :leader
      :desc "Edit .env" :n "fv"
      (lambda ()
          (interactive)
          (find-file-other-window (expand-file-name "~/.env")))
      :desc "Edit .zshrc" :n "fz"
      (lambda ()
          (interactive)
          (find-file-other-window (expand-file-name "../zsh/.zshrc" doom-private-dir))))
#+end_src

** eshell
Add history expansion to eshell (!n and !cmd)
#+begin_src emacs-lisp
(add-hook 'eshell-expand-input-functions 'eshell-expand-history-references)
#+end_src
