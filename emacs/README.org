#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle init.el :comments no
#+AUTHOR: Arunkumar M V

This is my literate configuration for Emacs.

* Installation
Please run the following to generate init.el when initially setting up emacs.
#+begin_src shell :tangle no
emacs --batch --eval "(progn (require 'org) (setq org-confirm-babel-evaluate nil) (org-babel-tangle-file \"~/.config/emacs/config.org\"))"
#+end_src

* Startup
Turn on lexical binding in init.el
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
#+end_src

Reduce garbage collection frequency for faster startup and use a hook to measure Emacs startup time.
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

** MacOS
Variable to indicate if system is on MacOS.
#+begin_src emacs-lisp
  (defvar ak-is-mac (eq system-type 'darwin)
    "Indicate if system is on MacOS.")
#+end_src

* Package management
Define local directory.
#+begin_src emacs-lisp
(defconst ak-local-dir
  (concat user-emacs-directory ".local/")
  "Directory local storage")
#+end_src

Using =straight.el= for package management.
#+begin_src emacs-lisp
  (setq straight-base-dir (file-truename ak-local-dir))
#+end_src

Bootstrap straight.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" ak-local-dir))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Use straight to install packages by default and in use-package expressions.
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)

(setq use-package-compute-statistics t)
#+end_src

** Cache directories
Cache directories.
#+begin_src emacs-lisp
(defconst ak-etc-dir
  (concat ak-local-dir "etc/"))

(defconst ak-var-dir
  (concat ak-local-dir "var/"))
#+end_src

** Keep .emacs.d clean
No littering
#+begin_src emacs-lisp
  (use-package no-littering
    :init
    (setq no-littering-etc-directory ak-etc-dir
	  no-littering-var-directory ak-var-dir)
    :config
    (no-littering-theme-backups))
#+end_src

** Update load path
#+begin_src emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "lisp/"))
#+end_src

** MacOS environment
Using =exec-path-from-shell= for proper emacs environment.
#+begin_src emacs-lisp
  (when ak-is-mac
    (use-package exec-path-from-shell
      :init
      (setq exec-path-from-shell-arguments '("-l"))
      (exec-path-from-shell-initialize)))
#+end_src

** Garbage Collection Magic Hack
#+begin_src emacs-lisp
  (use-package gcmh
    :hook
    (after-init . gcmh-mode)
    :init
    (setq gcmh-idle-delay 'auto  ; default is 15s
	  gcmh-auto-idle-delay-factor 10
	  gcmh-high-cons-threshold (* 16 1024 1024)))  ; 16mb
#+end_src

* Keybindings
Core configurations for keybindings.
** Undo tree
Use =undo-tree= for vim-like undo.
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))
#+end_src

** Evil mode
Vim keys in Emacs using =evil=.
#+begin_src emacs-lisp
    (use-package evil
      :init
      (setq evil-want-integration t
	    evil-want-keybinding nil
	    evil-want-C-i-jump nil
	    evil-respect-visual-line-mode t
	    evil-undo-system 'undo-tree
	    evil-want-minibuffer t)
      :config
      (evil-mode 1)
      (setq-default
       evil-emacs-state-tag          " E "
       evil-normal-state-tag         " N "
       evil-insert-state-tag         " I "
       evil-visual-char-tag          " V "
       evil-visual-line-tag          " VL "
       evil-visual-screen-line-tag   " VSL "
       evil-visual-block-tag         " VB "
       evil-motion-state-tag         " M "
       evil-operator-state-tag       " O "
       evil-replace-state-tag        " R "))
#+end_src

=evil-collection= provides better evil bindings for different major modes.
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-corfu-key-themes '(tab-n-go))
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :config
    (evil-collection-init))
#+end_src

Use =evil-snipe= for better motion.
#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (setq evil-snipe-scope 'line
	  evil-snipe-repeat-scope 'visible)
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))
#+end_src

Use =evil-anzu= for better search highlighting.
#+begin_src emacs-lisp
  (use-package evil-anzu
    :config
    (global-anzu-mode +1))
#+end_src

** Which key
Keybinding helper for quick reference with =which-key=.
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Prefix keybinding
Use =general.el= for prefixed keybinding.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer ak-leader-key-def
      :states '(normal visual)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer ak-local-leader-key-def
      :prefix "SPC m")


    (general-create-definer ak-ctrl-c-key-def
      :prefix "C-c"))
#+end_src

** Convenient bindings
Setup convenient bindings and other which key prefixes.
#+begin_src emacs-lisp
  (general-def help-map
    "F" 'describe-face)

  (ak-leader-key-def
    "." '(find-file :which-key "Find file")
    "," '(consult-buffer :which-key "Switch persp buffer")
    "u" '(universal-argument :which-key "Universal argument")
    "g" '(:ignore t :which-key "git")
    "h" '(:keymap help-map :which-key "help")
    "m" '(:ignore t :which-key "local leader")
    "o" '(:ignore t :which-key "open")
    "t" '(:ignore t :which-key "toggle"))

  (general-define-key
   :states 'normal
   :keymaps 'org-present-mode-keymap 
   "g[" 'evil-goto-first-line
   "g]" 'evil-goto-line)
#+end_src

*** Reload init.el
#+begin_src emacs-lisp
  (defun reload-init-file ()
    "Reload init.el"
    (interactive)
    (org-babel-tangle (expand-file-name "README.org" user-emacs-directory))
    (load-file (expand-file-name "init.el" user-emacs-directory))
    (message "init.el reloaded"))

  (ak-ctrl-c-key-def
   "l" 'reload-init-file)
#+end_src

** MacOS
Key modifiers for macOS.
#+begin_src emacs-lisp
  (when ak-is-mac
    (setq
     ns-command-modifier 'meta
     ns-right-option-modifier 'control
     ns-option-modifier 'super
     ns-control-modifier 'control
     ns-function-modifier 'hyper))
#+end_src

* UI
** Fonts and icons
Set font and size.
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
			:font "Source Code Pro"
			:weight 'Regular
			:height 170)

    (set-face-attribute 'fixed-pitch nil
			:font "Source Code Pro"
			:weight 'Regular
			:height 170)

    (set-face-attribute 'variable-pitch nil
			:font "FiraGO"
			:weight 'Light
			:height 200)
#+end_src

Use =all-the-icons=.
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

Use =nerd-icons=.
#+begin_src emacs-lisp
(use-package nerd-icons)
#+end_src

** Clean up Emacs UI
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
#+end_src

** Frame size
Always fullscreen.
#+begin_src emacs-lisp
(set-frame-parameter nil 'fullscreen 'fullboth)
  ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Keybinding to toggle fullscreen.
#+begin_src emacs-lisp
  (ak-leader-key-def
    "tF" '(toggle-frame-fullscreen :which-key "Fullscreen"))
#+end_src

** Date and time
Set date and time display format.
#+begin_src emacs-lisp
  (setq display-time-day-and-date t
	display-time-format "%a %b %d %H:%M"
	display-time-default-load-average nil)
  (when (not (bound-and-true-p display-time-mode))
    (display-time-mode))
#+end_src

Nicer face displaying time.
#+begin_src emacs-lisp
      (defface ak-display-time
	'((t (:inherit bold)))
	"Face for `display-time-string' in `global-mode-string'")
#+end_src

** Battery
Use =fancy-battery= for a nicer battery display
#+begin_src emacs-lisp
  (use-package fancy-battery
    :hook (after-init . fancy-battery-mode)
    :config
    (setq fancy-battery-show-percentage t))
#+end_src

** DND
*** Don't ring the bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

*** Silence warnings
#+begin_src emacs-lisp
    (use-package warnings
      :config
      (setq native-comp-async-report-warnings-errors nil)
      (add-to-list 'warning-suppress-types 'defvaralias))

  (setq byte-compile-warnings '(cl-functions))
#+end_src

*** Supress invalid image error
#+begin_src emacs-lisp
  (add-to-list 'image-types 'svg)
  (add-to-list 'image-types 'gif)
  #+end_src

** Use short answers
#+begin_src emacs-lisp
(setq use-short-answers t)
#+end_src

** Dashboard
Setup a minimal dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (dashboard-setup-startup-hook)
    :config
    (setq dashboard-banner-logo-title "Welcome to Emacs"
	  dashboard-startup-banner (expand-file-name "emacs.png" user-emacs-directory)
	  dashboard-center-content t
	  dashboard-show-shortcuts nil
	  dashboard-items '()
	  initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (add-hook 'after-init-hook 'dashboard-insert-startupify-lists))
#+end_src

** Theme
Trying out =modus-themes=.
#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs t
	  modus-themes-mixed-fonts t
	  modus-themes-syntax '(green-strings yellow-comments)
	  modus-themes-prompts '(bold intense)
	  modus-themes-completions
	  '((matches . (extrabold background))
	    (selection . (semibold accented))
	    (popup . (extrabold)))
	  modus-themes-headings
	  '((0 . (rainbow 2.2))
	    (1 . (rainbow 1.25))
	    (2 . (rainbow 1.1))
	    (3 . (rainbow 1.05))
	    (t . (rainbow)))
	  modus-themes-common-palette-overrides '((bg-region bg-cyan-intense)

						  (bg-completion       bg-cyan-subtle)
						  (bg-hover            bg-yellow-intense)
						  (bg-hover-secondary  bg-magenta-intense)
						  (bg-hl-line          bg-dim)

						  (bg-mode-line-active      bg-inactive)
						  (fg-mode-line-active      fg-main)
						  (border-mode-line-active  blue-intense)

						  (fringe bg-inactive)
						  (comment fg-dim)
						  (name magenta-cooler)

						  (date-common cyan)
						  (date-deadline red)
						  (date-event blue)
						  (date-holiday magenta-warmer)
						  (date-now blue-faint)
						  (date-scheduled yellow-warmer)
						  (date-weekday fg-main)
						  (date-weekend red-faint)

						  (keybind blue-intense)

						  (mail-cite-0 blue)
						  (mail-cite-1 yellow)
						  (mail-cite-2 green)
						  (mail-cite-3 magenta)
						  (mail-part magenta-cooler)
						  (mail-recipient cyan)
						  (mail-subject red-warmer)
						  (mail-other cyan-cooler)

						  (fg-prompt blue-intense)

						  (prose-block fg-dim)
						  (prose-done green-intense)
						  (prose-metadata cyan-faint)
						  (prose-metadata-value blue-cooler)
						  (prose-table cyan)
						  (prose-todo red-intense)

						  (fg-heading-0 blue-cooler)
						  (fg-heading-1 magenta-cooler)
						  (fg-heading-2 magenta-warmer)
						  (fg-heading-3 blue)
						  (fg-heading-4 cyan)
						  (fg-heading-5 green-warmer)
						  (fg-heading-6 yellow)
						  (fg-heading-7 red)
						  (fg-heading-8 magenta)

						  (bg-heading-0 unspecified)
						  (bg-heading-1 bg-magenta-nuanced)
						  (bg-heading-2 bg-red-nuanced)
						  (bg-heading-3 bg-blue-nuanced)
						  (bg-heading-4 bg-cyan-nuanced)
						  (bg-heading-5 bg-green-nuanced)
						  (bg-heading-6 bg-yellow-nuanced)
						  (bg-heading-7 bg-red-nuanced)
						  (bg-heading-8 bg-magenta-nuanced)

						  (overline-heading-0 unspecified)
						  (overline-heading-1 magenta-cooler)
						  (overline-heading-2 magenta-warmer)
						  (overline-heading-3 blue)
						  (overline-heading-4 cyan)
						  (overline-heading-5 green)
						  (overline-heading-6 yellow-cooler)
						  (overline-heading-7 red-cooler)
						  (overline-heading-8 magenta))
	  )
    :config
    (load-theme 'modus-vivendi :no-confirm))

  (ak-leader-key-def
    "tt" '(modus-themes-toggle :which-key "Modus themes"))
#+end_src

** Modeline
Setup and configure =doom-modeline=.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :straight (doom-modeline :type git :host github :repo "seagle0128/doom-modeline")
    :after (modus-themes)
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-encoding nil
	  doom-modeline-major-mode-icon t
	  doom-modeline-modal-icon nil
	  doom-modeline-time nil
	  doom-modeline-height 30
	  )
    ;; Show text column number in modeline
    (column-number-mode)
#+end_src

Remove doom-modeline time and battery hooks to display battery status in tab bar.
#+begin_src emacs-lisp
	  (remove-hook 'display-time-mode-hook 'doom-modeline-override-time)
	  (remove-hook 'display-battery-mode-hook 'doom-modeline-override-battery)
	  (remove-hook 'doom-modeline-mode-hook 'doom-modeline-override-time)
	  (remove-hook 'doom-modeline-mode-hook 'doom-modeline-override-battery)

  (defun ak-doom-modeline-override-time-advice ()
    global-mode-string)

    (advice-add 'doom-modeline-override-time :override #'ak-doom-modeline-override-time-advice))

#+end_src

Change modeline faces.
#+begin_src emacs-lisp
      (defun ak-doom-modeline-set-faces-h ()
	(modus-themes-with-colors
	  (custom-set-faces
	   `(doom-modeline-evil-emacs-state ((,c :inherit bold :background ,magenta :foreground ,bg-main)))
	   `(doom-modeline-evil-normal-state ((,c :inherit bold :background ,green :foreground ,bg-main)))
	   `(doom-modeline-evil-insert-state ((,c :inherit bold :background ,blue :foreground ,bg-main)))
	   `(doom-modeline-evil-visual-state ((,c :inherit bold :background ,rust :foreground ,bg-main)))
	   `(doom-modeline-evil-motion-state ((,c :inherit bold :background ,red-intense :foreground ,bg-main)))
	   `(doom-modeline-evil-operator-state ((,c :inherit bold :background ,yellow-intense :foreground ,bg-main)))
	   `(doom-modeline-evil-replace-state ((,c :inherit bold :background ,magenta-intense :foreground ,bg-main)))
	   `(doom-modeline-buffer-modified ((,c :inherit bold :foreground ,magenta-cooler))))))

      (add-hook 'doom-modeline-mode-hook 'ak-doom-modeline-set-faces-h)
      (add-hook 'modus-themes-after-load-theme-hook 'ak-doom-modeline-set-faces-h)
#+end_src

*** Hide modeline
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :hook ((vterm-mode eshell-mode) . hide-mode-line-mode))

  (ak-leader-key-def
    "tm" '(hide-mode-line-mode :which-key "Modeline"))
#+end_src

** Tab bar
Use the tab bar as a global modeline.
#+begin_src emacs-lisp
  (setq tab-bar-format '(tab-bar-format-align-right tab-bar-format-global)
	auto-resize-tab-bars nil)
  (tab-bar-mode +1)
#+end_src

Properly format global mode string as it is used by the tab bar.
#+begin_src emacs-lisp
  (defun ak-format-global-mode-string ()
    "Format `global-mode-string' to display perspective, time and battery"
    (setq global-mode-string '("" (:eval (persp-mode-line)) " | " (:eval (propertize display-time-string 'face 'ak-display-time)) "| " fancy-battery-mode-line " |")))

  (add-hook 'after-init-hook #'ak-format-global-mode-string)
  (add-hook 'doom-modeline-mode-hook #'ak-format-global-mode-string)
#+end_src

*** Toggle tab bar
#+begin_src emacs-lisp
    (ak-leader-key-def
      "tb" '(tab-bar-mode :which-key "Tab bar"))
#+end_src

** Better scrolling
Add smooth scrolling and mouse scroll support.
#+begin_src emacs-lisp
  (setq redisplay-dont-pause t
	scroll-margin 1
	scroll-step 1
	scroll-conservatively 10000
	scroll-preserve-screen-position 1
	mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
	mouse-wheel-progressive-speed nil            ;; don't accelerate scrolling
	mouse-wheel-follow-mouse 't)                 ;; scroll window under mouse
#+end_src

Add keybindings for scrolling other window. Useful for [[*Embark][Embark]].
#+begin_src emacs-lisp
  (general-define-key
   "C->" 'scroll-other-window
   "C-<" 'scroll-other-window-down)
#+end_src

** Cursor
Customize cursor color.
#+begin_src emacs-lisp
  (defun ak-cursor-color-set-color-h ()
    (modus-themes-with-colors
      (custom-set-faces
       `(cursor ((,c :background ,magenta-intense))))))

  (add-hook 'after-init-hook #'ak-cursor-color-set-color-h)
  (add-hook 'modus-themes-after-load-theme-hook #'ak-cursor-color-set-color-h)
#+end_src

*** Highlight cursor
=pulsar= to highlight cursor location.
#+begin_src emacs-lisp
	(use-package pulsar
	  :config
	  (setq pulsar-delay 0.06
		pulsar-iterations 10
		pulsar-face 'pulsar-generic)
	  (dolist (evil-window-function
		   '(evil-scroll-down
		     evil-scroll-up
		     evil-window-up
		     evil-window-left
		     evil-window-right
		     evil-window-down
		     evil-window-move-far-right
		     evil-window-move-far-left
		     evil-window-move-very-top
		     evil-window-move-very-bottom))
	    (add-to-list 'pulsar-pulse-functions evil-window-function))
	  (pulsar-global-mode))
#+end_src

** Hightlight line
Highlight current line in all buffers.
#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

** Line numbers
Configure display line numbers.
#+begin_src emacs-lisp
    (setq-default display-line-numbers-width 3)
    (setq-default display-line-numbers-type 'relative)
    (setq-default display-line-numbers-widen t)
    (dolist (mode '(text-mode-hook
		    prog-mode-hook
		    conf-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

*** Toggle line numbers
Function to toggle display and cycle styles of line numbers.
#+begin_src emacs-lisp
    (defun ak-toggle-line-numbers ()
      "Toggle line number display."
      (interactive)
      (defvar ak-line-number-previous-style display-line-numbers-type)
      (if display-line-numbers
  	(progn (setq ak-line-number-previous-style display-line-numbers)
  	       (setq display-line-numbers nil))
        (setq display-line-numbers ak-line-number-previous-style)))

    (defun ak-cycle-line-numbers ()
      "Cycle line number styles.

    Cycles through regular, relative and no line numbers. The order depends on what
    `display-line-numbers-type' is set to. If you're using Emacs 26+, and
    visual-line-mode is on, this skips relative and uses visual instead.

    See `display-line-numbers' for what these values mean."
      (interactive)
      (defvar ak-line-number-style display-line-numbers-type)
      (let* ((styles `(t ,(if visual-line-mode 'visual 'relative) nil))
  	   (order (cons display-line-numbers-type (remq display-line-numbers-type styles)))
  	   (queue (memq ak-line-number-style order))
  	   (next (if (= (length queue) 1)
  		     (car order)
  		   (car (cdr queue)))))
        (setq ak-line-number-style next)
        (setq display-line-numbers next)
        (message "Switched to %s line numbers"
  	       (pcase next
  		 (`t "normal")
  		 (`nil "disabled")
  		 (_ (symbol-name next))))))

    (ak-leader-key-def
      "tl" '(ak-cycle-line-numbers :which-key "Line numbers style")
      "tL" '(ak-toggle-line-numbers :which-key "Line numbers"))
#+end_src

** Visual line mode
Use =visual-line-mode= in document buffers.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

* Completion
** Vertico
A streamlined minimal and performant completion with =vertico.el=
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (setq vertico-resize nil)
    (vertico-mode)
    ;; This works with `file-name-shadow-mode' enabled.  When you are in
    ;; a sub-directory and use, say, `find-file' to go to your home '~/'
    ;; or root '/' directory, Vertico will clear the old path to keep
    ;; only your current input.
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
    )
#+end_src

*** filename-shadow-mode
#+begin_src emacs-lisp
;; When you first call `find-file' (C-x C-f by default), you do not
;; need to clear the existing file path before adding the new one.
;; Just start typing the whole path and Emacs will "shadow" the
;; current one.  For example, you are at ~/Documents/notes/file.txt
;; and you want to go to ~/.emacs.d/init.el: type the latter directly
;; and Emacs will take you there.
(file-name-shadow-mode 1)
#+end_src

*** Savehist
Persist minibuffer history over Emacs restarts with =savehist=.
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal insert)
   :keymaps 'vertico-map
   "C-j" 'vertico-next
   "C-k" 'vertico-previous
   "M-RET" 'vertico-exit-input)
#+end_src

** Marginalia
=marginalia= for helpful annotations for various types of minibuffer completions.
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

** Orderless
=orderless= completion style.
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Consult
=consult.el= for practical completing-read commands.
#+begin_src emacs-lisp
    (use-package consult
      :after (perspective)
      :config
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources persp-consult-source)
      (add-to-list 'consult-buffer-filter "^\\*.*\\*$"))
#+end_src

** Embark
Completing actions with =embark=
#+begin_src emacs-lisp
    (use-package embark
      :ensure t
      :bind (("C-;" . embark-act)
	     ("C-:" . embark-dwim)
	     ("C-h B" . embark-bindings))
      :init
      (setq prefix-help-command #'embark-prefix-help-command)
      :config
      (setq embark-verbose-indicator-display-action '(display-buffer-at-bottom)))

    (use-package embark-consult
      :after embark)
#+end_src

** Corfu
In-buffer completions with =corfu=
#+begin_src emacs-lisp
  (use-package corfu
    :init
    (global-corfu-mode)
    :custom
    (corfu-cycle t)
    :bind (:map corfu-map
    	      ("C-j" . corfu-next)
    	      ("C-k" . corfu-previous)
    	      ("TAB" . corfu-insert))
    :config
    (setq tab-always-indent 'complete)
    ;; Adapted from Corfu's manual.
    (defun ak-corfu-enable-always-in-minibuffer ()
      "Enable Corfu in the minibuffer if Vertico is not active.
    Useful for prompts such as `eval-expression' and `shell-command'."
      (unless (bound-and-true-p vertico--input)
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'ak-corfu-enable-always-in-minibuffer 1))

  ;; Remove interfering evil binding
  (general-define-key
   :states 'insert
   :keymaps 'evil-insert-state-map 
   "C-k" nil)
#+end_src

*** Cape
Adding cape for additional completion-at-point functions.
#+begin_src emacs-lisp
  (use-package cape
    :init
    (setq cape-dabbrev-min-length 3)
    (dolist (backend '( cape-symbol cape-keyword cape-file cape-dabbrev cape-ispell))
      (add-to-list 'completion-at-point-functions backend)))
#+end_src

** Nerd icons completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
  #+end_src

** Bibliography management
#+begin_src emacs-lisp
  (defvar ak-zotero-bibtex-library (concat (getenv "HOME") "/Documents/Zotero/")
    "Path to bibtex library managed by Zotero")

  (defvar ak-zotero-bibtex-file (expand-file-name "references.bib" ak-zotero-bibtex-library)
    "Path to bibtex file managed by Zotero")
#+end_src

*** Citar
=citar= for managing bibliography.
#+begin_src emacs-lisp
  (use-package citar
    :defer t
    :custom
    (citar-bibliography ak-zotero-bibtex-file)
    (citar-library-paths (list ak-zotero-bibtex-library))
    (citar-notes-paths (list ak-org-literature-notes-directory))
    :config
    (setq citar-templates
	  '((main . "${title:48}     ${author editor:30}     ${date year issued:4}")
	    (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
	    (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
	    (note . "${title}")))

    (defvar ak-citar-indicator-files
      (citar-indicator-create
       :symbol (nerd-icons-icon-for-extension "pdf" :face 'nerd-icons-red :v-adjust -0.1)
       :function #'citar-has-files
       :tag "has:files"))

    (defvar ak-citar-indicator-notes
      (citar-indicator-create
       :symbol (nerd-icons-icon-for-extension "org" :face 'nerd-icons-lgreen :v-adjust -0.1)
       :function #'citar-has-notes
       :tag "has:notes"))

    (defvar ak-citar-indicator-links
      (citar-indicator-create
       :symbol (nerd-icons-octicon "nf-oct-link" :face 'nerd-icons-blue :v-adjust 0.01)
       :function #'citar-has-links
       :tag "has:links"))

    (setq citar-indicators
	  (list ak-citar-indicator-files
		ak-citar-indicator-notes
		ak-citar-indicator-links))

    (setq citar-symbol-separator "  "))
#+end_src

*** Citar embark
=citar-embark= for more contextual actions.
#+begin_src emacs-lisp
  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode))
#+end_src

*** Keybinding
#+begin_src emacs-lisp
  (ak-leader-key-def
    "ob" '(citar-open-files :which-key "BibTeX file"))
#+end_src

* Windows
** Text scaling
Scale text with =C-M--= and =C-M-==
#+begin_src emacs-lisp
(use-package default-text-scale
  :defer 1
  :config
  (default-text-scale-mode))
#+end_src

** Framemove
=framemove= integration to navigate between frames.
#+begin_src emacs-lisp
  (use-package framemove
    :config
    (setq framemove-hook-into-windmove t))
#+end_src

** Ace window
=ace-window= for easily switching between windows.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (:map evil-window-map
		("a" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (setq aw-dispatch-always t)
    (ace-window-display-mode 1))
#+end_src

** Winner
Window history with =winner=.
#+begin_src emacs-lisp
  (use-package winner
    :bind (:map evil-window-map
		("u" . winner-undo)
		("U" . winner-redo))
    :config
    (winner-mode))
#+end_src

** Keybindings
Bind evil window keys to global prefix.
#+begin_src emacs-lisp
  (ak-leader-key-def
    "w" '(:package evil :keymap evil-window-map :which-key "window"))

  (general-define-key
   :keymaps 'evil-window-map
   "d" 'evil-window-delete
   "n" 'ak-window-nav-hydra/body
   "c" nil)
#+end_src

** Popper
Taming popups with =popper.el=
#+begin_src emacs-lisp
    (use-package popper
      :ensure t ; or :straight t
      :bind (("C-`"   . popper-toggle-latest)
  	   ("M-`"   . popper-cycle)
  	   ("C-M-`" . popper-toggle-type))
      :custom
      (popper-window-height 12)
      :init
      (setq popper-reference-buffers
  	  '("\\*Messages\\*"
  	    "Output\\*$"
  	    "\\*Async Shell Command\\*"
  	    "^\\*vterm-popup.*\\*$"
  	    "^\\*scratch.*\\*$"
	      "\\*eldoc\\*"
  	    help-mode
  	    helpful-mode
  	    compilation-mode
  	    racket-repl-mode)
  	  popper-mode-line 1)
    (popper-mode 1)
    (popper-echo-mode 1)) 
#+end_src

* Buffers and workspaces
** Perspective
Workspaces with =perspective=.
#+begin_src emacs-lisp
  (use-package perspective
    :custom
    (persp-initial-frame-name "main")
    :config
    (setq persp-suppress-no-prefix-key-warning t
	  persp-show-modestring t
	  persp-modestring-short t
	  persp-sort 'created)
#+end_src

*** Display perspectives.
#+begin_src emacs-lisp
  (defun ak-persp-display ()
    "Display numbered perspectives tabs at the bottom of the screen"
    (interactive)
    (let* ((persps (persp-names))
	   (current-persp (persp-current-name))
	   (tab-line (mapconcat
		      #'identity
		      (cl-loop for persp in persps
			       for i to (length persps)
			       collect
			       (propertize (format " [%d] %s " (1+ i) persp)
					   'face (if (equal current-persp persp)
						     'highlight
						   'default)))
		      " ")))
      (message "%s" tab-line)))

  (add-hook 'persp-switch-hook #'ak-persp-display)
#+end_src

*** Kill the current perspective.
#+begin_src emacs-lisp
  (defun ak-persp-kill-current ()
    "Kill the current perspective in the frame"
    (interactive)
    (persp-kill (persp-current-name)))
#+end_src

*** Prettify short persp modestring displayed in the tab-bar.
#+begin_src emacs-lisp
  (defun ak-persp-format-modestring-short (modestring)
    "Format short `persp-mode-line' for prettier display"
    (if persp-modestring-short
	(let ((open (nth 0 modestring))
	      (name (nth 1 modestring))
	      (close (nth 2 modestring)))
	  (list open
		(propertize name 'face 'persp-selected-face)
		close))
      modestring))

  (advice-add 'persp-mode-line :filter-return #'ak-persp-format-modestring-short)
#+end_src

*** Dashboard in new perspectives
Advice function to return the dashboard buffer instead of scratch when a new perspective is opened.
#+begin_src emacs-lisp
  (defun ak-persp-get-dashboard-buffer (&optional name)
    "Return existing dashboard buffer or create new if none exists"
    (let* ((buffer-name dashboard-buffer-name)
	   (buffer (get-buffer buffer-name)))
      (unless buffer
	(setq buffer (get-buffer-create buffer-name))
	(with-current-buffer buffer
	  (when (eq major-mode 'fundamental-mode)
	    (funcall 'dashboard-mode))
	  (dashboard-refresh-buffer)))
      buffer))

  (advice-add 'persp-get-scratch-buffer :override #'ak-persp-get-dashboard-buffer)
#+end_src

*** Quick save perspectives
Conveniently save and load perspectives.
#+begin_src emacs-lisp
  (make-directory persp-save-dir t)
  (setq persp-state-default-file (expand-file-name "default.el" persp-save-dir))

  (defun ak-persp-state-quick-save ()
    "Quick save current perspective state into `persp-state-default-file'"
    (interactive)
    (persp-state-save))

  (defun ak-persp-state-quick-load ()
    "Quick load the perspective state from `persp-state-default-file'"
    (interactive)
    (persp-state-load persp-state-default-file))

  (add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (general-def perspective-map
    "TAB" 'ak-persp-display
    "d" 'ak-persp-kill-current
    "S" 'ak-persp-state-quick-save
    "R" 'ak-persp-state-quick-load
    "I" 'persp-ibuffer)

  (ak-leader-key-def
    "TAB" '(:keymap perspective-map :which-key "perspective"))
#+end_src

*** Turn on perspective
#+begin_src emacs-lisp
	;; Running `persp-mode' multiple times resets the perspective list...
	(unless (equal persp-mode t)
	  (persp-mode)))
#+end_src

** Scratch buffer
Require custom scratch buffer utility.
#+begin_src emacs-lisp
  (with-eval-after-load 'project
    (require 'scratchy)
    (setq scratchy-dir (expand-file-name "scratch" ak-etc-dir)))
#+end_src

** Save place
Turn on =save-place-mode=.
#+begin_src emacs-lisp
  (save-place-mode 1) 
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (ak-leader-key-def
    "b" '(:ignore t :which-key "buffer")
    "bb" '(consult-buffer :which-key "Switch buffer")
    "bd" '(kill-current-buffer :which-key "Kill buffer")
    "bk" '(kill-buffer-and-window :which-key "Kill buffer and window")
    "bw" '(consult-buffer-other-window :which-key "Switch buffer other window")
    "bx" '(scratchy-open-scratch-buffer :which-key "Open scratch buffer")
    "bX" '(scratchy-switch-to-scratch-buffer :which-key "Switch to scratch buffer"))
#+end_src

* Development
** Magit
Easy git management with =magit=.
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :init
    (autoload 'magit-project-status "magit-extras"))

#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (ak-leader-key-def
    "gg"  '(magit-status :which-key "Status")
    "gd"  '(magit-diff-unstaged :which-key "Diff unstaged")
    "gc"  '(magit-branch-or-checkout :which-key "Checkout")
    "gl"   '(:ignore t :which-key "log")
    "glc" '(magit-log-current :which-key "Log current")
    "glf" '(magit-log-buffer-file :which-key "Log buffer")
    "gb"  '(magit-branch :which-key "Branch")
    "gP"  '(magit-push-current :which-key "Push")
    "gp"  '(magit-pull-branch :which-key "Pull")
    "gf"  '(magit-fetch :which-key "Fetch")
    "gF"  '(magit-fetch-all :which-key "Fetch all")
    "gr"  '(magit-rebase :which-key "Rebase")
    "gs" '(magit-project-status :which-key "Project status"))
#+end_src
** Ediff
=ediff= for nicer diffs.
#+begin_src emacs-lisp
  (use-package ediff
    :straight (:type built-in)
    :config
    (setq ediff-keep-variants nil
	  ediff-make-buffers-readonly-at-startup nil
	  ediff-split-window-function 'split-window-horizontally
	  ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    (prog-mode . diff-hl-mode)
    (text-mode . diff-hl-mode)
    (dired-mode . diff-hl-dired-mode)
    :config
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (if (fboundp 'fringe-mode) (fringe-mode '4))
    (setq diff-hl-draw-borders nil)
    (setq diff-hl-side 'left))
#+end_src

** Markdown
Markdown for easy documents.
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src

** Project.el
Working on projects with =project.el=.
#+begin_src emacs-lisp
  (use-package project
    :straight (:type built-in)
    :config
    (setq project-switch-commands (delete '(project-vc-dir "VC-Dir") project-switch-commands))
    (add-to-list 'vc-directory-exclusion-list ".cache"))
#+end_src

*** Perspective integration
Bridge between =perspective= and =project.el=.
#+begin_src emacs-lisp
    (use-package perspective-project-bridge
      :straight (perspective-project-bridge :type git :host github :repo "arunkmv/perspective-project-bridge")
      :hook
      (persp-mode . perspective-project-bridge-mode)
      (after-init . perspective-project-bridge-mode)
      :config
      (add-to-list 'perspective-project-bridge-funcs 'magit-project-status)
      (add-to-list 'perspective-project-bridge-funcs 'ak-vterm-toggle))
#+end_src

*** Consult integration
Integration with =consult=
#+begin_src emacs-lisp
(use-package consult-project-extra
  :straight (consult-project-extra :type git :host github :repo "Qkessler/consult-project-extra"))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
    (ak-leader-key-def
      "p" '(:package project :keymap project-prefix-map :which-key "projects")
      "SPC" '(consult-project-extra-find :which-key "Find in project"))
#+end_src

** Prog mode
*** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((org-mode prog-mode) . rainbow-delimiters-mode))
#+end_src

*** Highlight indent guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (setq highlight-indent-guides-method 'column)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

*** Treesitter
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
	'((bash-mode . bash-ts-mode)
	(json-mode . json-ts-mode)
	(python-mode . python-ts-mode)
	(c-mode . c-ts-mode)
	(c++-mode . c++-ts-mode)))
#+end_src

*** Ts-fold
Treesitter fold for code folding.
#+begin_src emacs-lisp
(use-package treesit-fold
  :straight (treesit-fold :type git :host github :repo "emacs-tree-sitter/treesit-fold"))
  #+end_src

*** Emacs Lisp
**** Elisp def
#+begin_src emacs-lisp
  (use-package elisp-def
    :hook (emacs-lisp-mode . elisp-def-mode)
    :config
    (general-define-key
     :states 'normal
     :keymaps 'emacs-lisp-mode-map
     "gd" 'elisp-def)
    (general-define-key
     :keymaps 'embark-symbol-map
     "d" 'elisp-def))
#+end_src

**** Package lint
#+begin_src emacs-lisp
  (use-package package-lint)
#+end_src

*** Eldoc
Configure =eldoc=.
#+begin_src emacs-lisp
  (use-package eldoc
    :straight (:type built-in)
    :config
    (setq eldoc-echo-area-use-multiline-p nil))
#+end_src

*** Eglot
=eglot= for using emacs as an IDE.
#+begin_src emacs-lisp
  (use-package eglot
    :hook
    ((verilog-mode-hook . eglot-ensure)
     (c-mode . eglot-ensure)
     (c++-mode . eglot-ensure)      
     (c-ts-mode . eglot-ensure)     
     (c++-ts-mode . eglot-ensure)
     (python-mode . eglot-ensure)
     (python-ts-mode . eglot-ensure)
     (scala-mode . eglot-ensure))
    :config
    (setq eglot-autoshutdown t))
#+end_src

**** Consult integration
#+begin_src emacs-lisp
  (use-package consult-eglot
    :defer t)
#+end_src

**** Keybindings
#+begin_src emacs-lisp
  (ak-leader-key-def
    "c" '(:ignore t :which-key "code")
    "cd" '(xref-find-definitions :which-key "Find definitionss")
    "cD" '(xref-find-definitions-other-window :which-key "Find definitions other window")
    "cR" '(xref-find-references :which-key "Find references")
    "cr" '(eglot-rename :which-key "Rename symbol")
    "cf" '(eglot-format :which-key "Format")
    "ch" '(eldoc-doc-buffer :which-key "Docs")
    "ci" '(eglot-code-organize-imports :which-key "Organize imports")
    "cx" '(eglot-code-quickfix :which-key "Quickfix")
    "cX" '(eglot-code-actions :which-key "Actions")
    "cs" '(consult-eglot-symbols :which-key "Find symbol"))
#+end_src

*** Verilog
Trying =verible-ls= out.
#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(verilog-mode . ("verible-verilog-ls"))))
#+end_src

**** Completion in =verilog-mode=
Bind TAB to =completion-at-point= in insert mode. =verilog-mode= binds it to =electric-verilog-tab=.
#+begin_src emacs-lisp
  (use-package verilog-mode
    :straight (:type built-in)
    :config
    (setq verilog-auto-newline nil)
    (general-define-key
     :keymaps 'verilog-mode-map
     [remap electric-verilog-tab] 'completion-at-point))
#+end_src

*** C/C++
=clangd= for C/C++.
#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '((c-mode c++-mode c-ts-mode c++-ts-mode) . ("clangd" "--header-insertion=never"))))
#+end_src

**** Completion in =cc-mode=
Bind TAB to =completion-at-point= in insert mode. =cc-mode= binds it to =c-indent-line-or-region=.
#+begin_src emacs-lisp
  (use-package cc-mode
    :straight (:type built-in)
    :config
    (general-define-key
     :keymaps 'c-mode-base-map
     [remap c-indent-line-or-region] 'completion-at-point))
#+end_src

**** CMake mode
#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src

*** Python
=pyright= for C/C++.
#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs '((python-mode python-ts-mode) . ("pylsp"))))
#+end_src

*** Python
**** Python venv support
#+begin_src emacs-lisp
(use-package pyvenv)
#+end_src

*** Python
**** Python venv support
#+begin_src emacs-lisp
(use-package pyvenv)
#+end_src

*** Scala
=scala-mode= for Scala highlighting and indentation.
#+begin_src emacs-lisp
  (use-package scala-mode
    :interpreter ("scala" . scala-mode)
    :config
    (add-hook 'scala-mode-hook
	      (lambda ()
		(add-hook 'before-save-hook 'eglot-format-buffer nil 'make-it-local))))
#+end_src

**** SBT mode
=sbt-mode= for executing sbt commands.
#+begin_src emacs-lisp
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false"))

    (defun ak/sbt-toggle()
      "Toggle sbt buffer popup window or create a new one if none exists."
      (interactive)
      (let* ((project-root (or (sbt:find-root)
			       (error "Could not find project root, type `C-h f sbt:find-root` for help.")))
	     (buffer-name (sbt:buffer-name))
	     (window (get-buffer-window buffer-name)))
	(if-let (win (get-buffer-window buffer-name))
	    (delete-window win)
	  (sbt-start)))))
#+end_src

*** YAML mode
#+begin_src emacs-lisp
    (use-package yaml-mode
      :mode ("\\.core\\'" . yaml-mode))
#+end_src

*** Vivado mode
=vivado-mode= for editing Xilinx Design Constraint files (XDC) and Vivado Tcl.
#+begin_src emacs-lisp
  (use-package vivado-mode
    :straight nil
    :config
    (setq auto-mode-alist (cons  '("\\.xdc\\'" . vivado-mode) auto-mode-alist))
    (add-hook 'vivado-mode-hook #'(lambda () (font-lock-mode 1)))
    (autoload 'vivado-mode "vivado-mode"))
#+end_src

*** Racket mode
Giving racket a try.
#+begin_src emacs-lisp
(use-package racket-mode)
#+end_src

* Org Mode
#+begin_src emacs-lisp
      (use-package org
	:demand t
	:straight (:type built-in)
	:config
	(setq org-directory (concat (getenv "HOME") "/Org")
	      org-fold-core-style 'overlays)
	(add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))
	(require 'ak-org))
#+end_src

** UI
*** Org modern
Using =org-modern= for a nicer org UI.
#+begin_src emacs-lisp
  (use-package org-modern
    :init
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
    :config
    (setq org-modern-block nil))
#+end_src

** Flashcards
Flashcards with =org-fc=.
#+begin_src emacs-lisp
	    (use-package org-fc
	      :straight
	      (org-fc
	       :type git :host github :repo "l3kn/org-fc"
	       :files (:defaults "awk" "demo.org"))
	      :after (hydra org)
	      :custom (org-fc-directories '("~/Org/fc"))
	      :config
	      (require 'org-fc-hydra)
	      (ak-local-leader-key-def
		:states 'normal
		:keymaps 'org-mode-map
		"F" '(org-fc-hydra/body :which-key "Flashcards"))
	      (general-define-key
	       :definer 'minor-mode
	       :states '(normal insert emacs)
	       :keymaps 'org-fc-review-flip-mode
	       "RET" 'org-fc-review-flip
	       "n" 'org-fc-review-flip
	       "s" 'org-fc-review-suspend-card
	       "p" 'org-fc-review-edit
	       "q" 'org-fc-review-quit)
	      (general-define-key
	       :definer 'minor-mode
	       :states '(normal insert emacs)
	       :keymaps 'org-fc-review-rate-mode
	       "a" 'org-fc-review-rate-again
	       "h" 'org-fc-review-rate-hard
	       "g" 'org-fc-review-rate-good
	       "e" 'org-fc-review-rate-easy
	       "s" 'org-fc-review-suspend-card
	       "p" 'org-fc-review-edit
	       "q" 'org-fc-review-quit)
	      (general-define-key
	       :definer 'minor-mode
	       :states '(normal insert emacs)
	       :keymaps 'org-fc-review-edit-mode
	       "r" 'org-fc-review-resume
	       "q" 'org-fc-review-quit)
#+end_src

*** Flip and rate hydras
#+begin_src emacs-lisp
  (defhydra ak-org-fc-review-flip-hydra ()
    ("n" org-fc-review-flip "Flip" :exit t)
    ("s" org-fc-review-suspend-card "Suspend" :exit t)
    ("p" org-fc-review-edit "Edit" :exit t)
    ("q" org-fc-review-quit "Quit review" :exit t)
    ("Q" nil "Quit" :exit t))

  (defhydra ak-org-fc-review-rate-hydra ()
    ("a" org-fc-review-rate-again "Again" :exit t)
    ("h" org-fc-review-rate-hard "Hard" :exit t)
    ("g" org-fc-review-rate-good "Good" :exit t)
    ("e" org-fc-review-rate-easy "Easy" :exit t)
    ("s" org-fc-review-suspend-card "Suspend" :exit t)
    ("p" org-fc-review-edit "Edit" :exit t)
    ("q" org-fc-review-quit "Quit review" :exit t)
    ("Q" nil "Quit" :exit t))
  (add-hook 'org-fc-after-setup-hook 'ak-org-fc-review-flip-hydra/body)
  (add-hook 'org-fc-after-flip-hook 'ak-org-fc-review-rate-hydra/body))
#+end_src

** Presentation
*** Org present
=org-present= for quick presentations with org mode.
#+begin_src emacs-lisp
  (use-package org-present
    :config
    (with-eval-after-load 'visual-fill-column
      (defun ak-org-present-start-h ()
	"Hook function run when `org-present' starts"
	(setq-local face-remapping-alist '((variable-pitch (:height 1.5) variable-pitch)
					   (header-line (:height 2.0) default)
					   (org-document-title (:height 1.5) org-document-title)
					   (org-code (:height 1.3) org-code)
					   (org-verbatim (:height 1.5) org-verbatim)
					   (org-block (:height 1.25) org-block)
					   (org-block-begin-line (:height 0.7) org-block)))
	(org-display-inline-images)
	(setq header-line-format " ")
	(evil-normal-state)
	(variable-pitch-mode 1)
	(setq visual-fill-column-width 110
	      visual-fill-column-center-text t)
	(visual-fill-column-mode 1)
	(visual-line-mode 1)
	(ak-toggle-line-numbers)
	(hide-mode-line-mode 1)
	(org-present-hide-cursor))

      (defun ak-org-present-end-h ()
	"Hook function run when `org-present' ends"
	(setq-local face-remapping-alist nil)
	(org-remove-inline-images)
	(setq header-line-format nil)
	(variable-pitch-mode 0)
	(visual-fill-column-mode 0)
	(visual-line-mode 0)
	(ak-toggle-line-numbers)
	(hide-mode-line-mode 0)
	(org-present-show-cursor))

      (add-hook 'org-present-mode-hook 'ak-org-present-start-h)
      (add-hook 'org-present-mode-quit-hook 'ak-org-present-end-h))

    (defun ak-org-present-prepare-slide (buffer-name heading)
      "Function run when nagivating slides in `org-present'"
      (org-overview)
      (org-show-entry)
      (org-show-children))

    (add-hook 'org-present-after-navigate-functions 'ak-org-present-prepare-slide))
#+end_src

**** Centering the presentation
Centering the presentation with =visual-fill-column=.
#+begin_src emacs-lisp
  (use-package visual-fill-column)
#+end_src

** Note taking
*** Directories and files
#+begin_src emacs-lisp
  (defvar ak-org-notes-directory (concat org-directory "/notes")
    "Directory where org notes are kept")

  (defvar ak-org-main-notes-directory (concat ak-org-notes-directory "/main")
    "Directory where main org notes are kept")

  (defvar ak-org-reference-notes-directory (concat ak-org-notes-directory "/reference")
    "Directory where reference org notes are kept")

  (defvar ak-org-literature-notes-directory (concat ak-org-notes-directory "/literature")
    "Directory where literature org notes are kept")

  (defvar ak-org-todo-file (concat org-directory "/todo.org")
    "File to capture tasks")

  (defvar ak-org-slipbox-file (concat ak-org-notes-directory "/inbox.org")
    "File to capture quick notes")
#+end_src

*** Org capture
=doct= for declarative =org-capture= templates.
#+begin_src emacs-lisp
  (use-package doct
    :commands (doct))

  (with-eval-after-load 'org-capture
    (setq org-capture-templates
	  (doct `(("Tasks" :keys "t"
		   :file ak-org-todo-file
		   :prepend t
		   :headline "Tasks"
		   :type entry
		   :template ("* TODO %? %^g%{extra}"
			      "%i %a")
		   :children (("General Task" :keys "t"
			       :extra "")
			      ("Task with deadline" :keys "d"
			       :extra "\nDEADLINE: %^{Deadline:}t")
			      ("Scheduled Task" :keys "s"
			       :extra "\nSCHEDULED: %^{Start time:}t")))
		  ("Resource" :keys "r"
		   :file ak-org-todo-file
		   :prepend t
		   :type entry
		   :template "* TODO [[%^{URL}][%^{Title}]]%? :%{url-type}:"
		   :children (("Article" :keys "a"
			       :headline "Articles"
			       :url-type "article")
			      ("Book" :keys "b"
			       :headline "Book"
			       :url-type "book")
			      ("Video" :keys "v"
			       :headline "Videos"
			       :url-type "video")
			      ("Webpage" :keys "w"
			       :headline "Webpage"
			       :url-type "web")))
		  ("Note" :keys "n"
		   :file ak-org-slipbox-file
		   :prepend t
		   :headline "Notes"
		   :type entry
		   :template ("* %?"
			      "%i"))))))
#+end_src

*** Org roam
=org-roam= for capturing and linking notes.
#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :init
    (setq org-roam-directory (file-truename ak-org-notes-directory))
    (org-roam-db-autosync-mode)
    (setq org-roam-capture-templates
	  '(("m" "main" plain
	     "%?"
	     :if-new (file+head "%(concat ak-org-main-notes-directory \"/\" \"${title}.org\")" "#+title: ${title}\n- tags :: \n")
	     :immediate-finish t
	     :unnarrowed t)
	    ("r" "reference" plain
	     "%?"
	     :if-new (file+head "%(concat ak-org-reference-notes-directory \"/\" \"${title}.org\")" "#+title: ${title}\n- tags :: \n")
	     :immediate-finish t
	     :unnarrowed t)))
    :config
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
	  (file-name-nondirectory
	   (directory-file-name
	    (file-name-directory
	     (file-relative-name (org-roam-node-file node) org-roam-directory))))
	(error "")))

    (setq org-roam-node-display-template
	  (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag))))
#+end_src

**** Org Roam BibTeX
Literature notes with =org-roam-bibtex=.
#+begin_src emacs-lisp
    (use-package org-roam-bibtex
      :after org-roam
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :config
      (setq orb-roam-ref-format 'org-cite))
#+end_src

**** Citar org roam
Integration between =citar=, =org-roam= and =org-noter=.
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :after org citar org-roam
    :config
    (defvar ak-citar-org-roam-note-header-template "%(concat \"- tags ::\n\n* Notes\n :PROPERTIES:\n :Custom_ID:\" \"${citekey}\" \"\n :NOTER_DOCUMENT: \" (concat ak-zotero-bibtex-library \"${file}\") \"\n :NOTER_PAGE: \n :END:\n\n\")")

    (defun ak-citar-org-roam--create-capture-note (citekey entry)
      "Open or create org-roam node for CITEKEY and ENTRY.
  Adds a custom header to associate the note and file with `org-noter'"
      ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d
      (let ((title (citar-format--entry
		    citar-org-roam-note-title-template entry))
	    (header (citar-format--entry
		     ak-citar-org-roam-note-header-template entry)))
	(org-roam-capture-
	 :templates
	 '(("r" "reference" plain "%?" :if-new
	    (file+head
	     "%(concat
	 (when citar-org-roam-subdir (concat citar-org-roam-subdir \"/\")) \"${citekey}.org\")"
	     "#+title: ${title}\n${header}")
	    :immediate-finish t
	    :unnarrowed t))
	 :info (list :citekey citekey :header header)
	 :node (org-roam-node-create :title title)
	 :props '(:finalize find-file))
	(org-roam-ref-add (concat "[cite:@" citekey "]"))))

    (citar-register-notes-source
     'ak-citar-org-roam-source (list :name "Org-Roam Notes"
				  :category 'org-roam-node
				  :items #'citar-org-roam--get-candidates
				  :hasitems #'citar-org-roam-has-notes
				  :open #'citar-org-roam-open-note
				  :create #'ak-citar-org-roam--create-capture-note
				  :annotate #'citar-org-roam--annotate))

    (setq citar-notes-source 'ak-citar-org-roam-source
	  citar-org-roam-subdir ak-org-literature-notes-directory
	  citar-org-roam-note-title-template "${title}"))

#+end_src

*** Org noter
=org-noter= for taking literature notes.
#+begin_src emacs-lisp
  (use-package org-noter
    :after org
    :config
    (setq org-noter-notes-window-location 'vertical-split
	  org-noter-doc-split-fraction '(0.2 . 0.8)
	  org-noter-hide-other nil
	  org-noter-always-create-frame nil
	  org-noter-notes-search-path (list ak-org-literature-notes-directory)
	  org-noter-separate-notes-from-heading nil)

    (add-hook 'org-noter-doc-mode-hook 'evil-normal-state))

  (ak-local-leader-key-def
    :states 'normal
    :keymaps 'org-noter-doc-mode-map
    "i" '(org-noter-insert-note :which-key "Insert note")
    "p" '(org-noter-insert-precise-note :which-key "Insert precise note")
    "k" '(org-noter-sync-prev-note :which-key "Go to previous note")
    "j" '(org-noter-sync-next-note :which-key "Go to next note")
    "s" '(org-noter-create-skeleton :which-key "Create skeleton")
    "q" '(org-noter-kill-session :which-key "Kill session"))
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (ak-local-leader-key-def
    :states 'normal
    :keymaps 'org-mode-map
    "p" '(org-present :which-key "Present")
    "e" '(org-export-dispatch :which-key "Export")
    "s" '(org-toggle-narrow-to-subtree :which-key "Toggle subtree narrowing"))

  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "C-o" 'ak-org-insert-item-below
   "C-O" 'ak-org-insert-item-above)
#+end_src

*** Block templates
Easy org block templates. Type <s and =TAB= for source block.
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

*** Consult org headings
#+begin_src emacs-lisp
  (ak-local-leader-key-def
   :states 'normal
   :keymaps 'org-mode-map
   "h" 'consult-org-heading)
#+end_src

** Latex export
Setup latex and beamer export
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook 'org-beamer-mode)
    (eval-after-load 'ox '(require 'ox-koma-letter))

    (require 'ox-latex)
    (setq org-latex-listings t)
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))
    (setq org-latex-pdf-process
	  '("pdflatex -interaction nonstopmode -output-directory %o %f"
	    "bibtex %b"
	    "pdflatex -interaction nonstopmode -output-directory %o %f"
	    "pdflatex -interaction nonstopmode -output-directory %o %f")))
#+end_src

*** Org-cite
Configure =org-cite=.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'oc)
    (setq org-cite-global-bibliography (list ak-zotero-bibtex-file)
	  org-cite-csl-styles-dir "~/Zotero/styles"))
#+end_src

* Tools and packages
Configurations for various tools and packages.
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :config
    (ak-leader-key-def
      "od" '(dired-jump :which-key "Dired")))
#+end_src

*** Trash
#+begin_src emacs-lisp
 ;; Do not outright delete files.  Move them to the system trash
;; instead.  The `trashed' package can act on them in a Dired-like
;; fashion.  I use it and can recommend it to either restore (R) or
;; permanently delete (D) the files.
(setq delete-by-moving-to-trash t)
#+end_src

*** Nerd icons
#+begin_src emacs-lisp
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))
  #+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (ak-leader-key-def
      "ov" '(treemacs :which-key "Treemacs")))
#+end_src

*** Nerd icons
#+begin_src emacs-lisp
(use-package treemacs-nerd-icons
  :config
  (treemacs-load-theme "nerd-icons"))
#+end_src

*** Perspective integration
#+begin_src emacs-lisp
  (use-package treemacs-perspective
    :after (treemacs perspective)
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src

** Helpful
Better help buffers with =helpful=.
#+begin_src emacs-lisp
  (use-package helpful
    :hook (helpful-mode . visual-line-mode)
    :init
    (global-set-key [remap describe-function] #'helpful-callable)
    (global-set-key [remap describe-command]  #'helpful-command)
    (global-set-key [remap describe-variable] #'helpful-variable)
    (global-set-key [remap describe-key]      #'helpful-key)
    (global-set-key [remap describe-symbol]   #'helpful-symbol)
    :config
    (general-define-key
     :keymaps 'embark-symbol-map
     [remap describe-symbol] 'helpful-symbol))
#+end_src

** Hydra
Using =hydra= for better key shortcuts.
#+begin_src emacs-lisp
  (use-package hydra
    :config
    (require 'hydra-examples))
#+end_src

*** Window navigation hydra
#+begin_src emacs-lisp
(defhydra ak-window-nav-hydra (:hint nil)
  "
          Split: _v_ert  _s_:horz
         Delete: _c_lose  _o_nly
  Switch Window: _h_:left  _j_:down  _k_:up  _l_:right  _u_:undo  _r_:redo
        Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file
         Resize: _H_:splitter left  _J_:splitter down  _K_:splitter up  _L_:splitter right
           Move: _a_:up  _z_:down  _i_menu
"
  ("z" scroll-up-line)
  ("a" scroll-down-line)
  ("i" idomenu)

  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)
  ("u" winner-undo)
  ("r" winner-redo)

  ("p" previous-buffer)
  ("n" next-buffer)
  ("b" switch-to-buffer)
  ("f" find-file)

  ("s" split-window-below)
  ("v" split-window-right)

  ("c" delete-window)
  ("o" delete-other-windows)

  ("H" hydra-move-splitter-left)
  ("J" hydra-move-splitter-down)
  ("K" hydra-move-splitter-up)
  ("L" hydra-move-splitter-right)

  ("q" nil))
#+end_src

** Pdf Tools
Reading pdfs with =pdf-tools=.
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-view-use-scaling t
    	pdf-view-use-imagemagick nil)
    ;; Fix flickering pdfs when evil-mode is enabled
    (add-hook 'pdf-view-mode-hook #'(lambda () (setq-local evil-normal-state-cursor (list nil))))
    (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
    (add-hook 'pdf-view-midnight-minor-mode-hook (lambda () (setq pdf-view-midnight-colors '("#ebdbb2" . "#282828"))))
    (add-hook 'pdf-view-mode-hook 'pdf-history-minor-mode)
    (add-hook 'pdf-view-mode-hook 'pdf-isearch-minor-mode)
    (general-define-key
     :states 'normal
     :keymaps 'pdf-view-mode-map
     "gh" '(:ignore t :which-key "PDF history")
     "ghf" '(pdf-history-forward :which-key "Forward")
     "ghb" '(pdf-history-backward :which-key "Backward")))
#+end_src

** Saveplace pdf view
=saveplace-pdf-view= to restore the last known pdf position.
#+begin_src emacs-lisp
  (use-package saveplace-pdf-view
    :after pdf-tools)
#+end_src

** Nov
Reading ebooks with =nov.el=.
#+begin_src emacs-lisp
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    (add-hook 'nov-mode-hook 'visual-line-mode)
    (setq nov-text-width 80))
#+end_src

** Avy
Jumping around with =avy=.
#+begin_src emacs-lisp
  (use-package avy
    :config
    (setq avy-background t
	  avy-single-candidate-jump nil)
    (general-define-key
     :states 'normal
     :keymaps 'global
     "gs" 'avy-goto-char-timer)
#+end_src

*** Embark integration
#+begin_src emacs-lisp
  (defun ak-avy-action-embark (pt)
    "Avy action to call embark-act"
    (unwind-protect
	(save-excursion
	  (goto-char pt)
	  (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)
  (setf (alist-get ?. avy-dispatch-alist) 'ak-avy-action-embark))
#+end_src

** Evil MC
Multiple cursors with =evil-mc=.
#+begin_src emacs-lisp
  (use-package evil-mc
    :config
    (global-evil-mc-mode 1))

  (general-define-key
   :states '(normal visual)
   :keymaps 'evil-mc-key-map
   "g.C-p" nil
   "g.C-r" nil
   "g.p" #'evil-mc-pause-cursors
   "g.r" #'evil-mc-resume-cursors)
#+end_src

** Vterm
Better terminal emulation with =vterm=.
#+begin_src emacs-lisp
  (use-package vterm
    :after evil-collection
    :commands (vterm ak-vterm-toggle ak-vterm-here)
    :config
    (setq vterm-max-scrollback 10000)
    (setq vterm-tramp-shells (append vterm-tramp-shells '(("ssh" "/bin/sh -l"))))
    (advice-add 'evil-collection-vterm-insert :before #'vterm-reset-cursor-point)
    (with-eval-after-load 'project
      (require 'ak-vterm)))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (ak-leader-key-def
    "ot" '(ak-vterm-toggle :which-key "Vterm toggle")
    "oT" '(ak-vterm-here :which-key "Vterm here"))

  (ak-local-leader-key-def
    :states 'normal
    :keymaps 'vterm-mode-map
    "s" '(ak-vterm-consult-zsh-history :which-key "ZSH history"))

  (general-define-key
   :keymaps 'embark-file-map
   "t" 'ak-vterm-dir)
#+end_src

** Eshell

** Latex
Writing latex documents with =auctex=.
#+begin_src emacs-lisp
  (use-package tex
    :defer t
    :straight auctex
    :config
    (add-to-list 'TeX-view-program-selection '(output-pdf "PDF Tools"))
    (when ak-is-mac
      (add-to-list 'TeX-view-program-list '("PDF Tools" TeX-pdf-tools-sync-view)))
    ;; Update PDF buffers after successful LaTeX compilation
    (remove-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

    (defun ak-latex-interface-toggle ()
      "Toggle nice latex interface"
      (interactive)
      (defvar-local ak-latex-interface nil)
      (if TeX-mode-p
  	(if (not ak-latex-interface)
  	    (progn
  	      (visual-line-mode)
  	      (visual-fill-column-mode)
  	      (ak-toggle-line-numbers)
  	      (setq visual-fill-column-center-text t
  		    visual-fill-column-width 70
  		    ak-latex-interface t))
  	  (progn
  	    (ak-toggle-line-numbers)
  	    (visual-line-mode -1)
  	    (visual-fill-column-mode -1)
  	    (setq ak-latex-interface nil))
  	  )
        (message "Not in TeX mode!"))
      )

    (ak-local-leader-key-def
      :states '(normal visual)
      :keymaps 'LaTeX-mode-map
      "c" '(TeX-command-master :which-key "command master")
      "f" '(TeX-font :which-key "fontify")
      "e" '(LaTeX-environment :which-key "environment")
      "s" '(LaTeX-section :which-key "section")
      "i" '(ak-latex-interface-toggle :which-key "Interface toggle")
      ;; preview-latex
      "p" '(:ignore :which-key "preview")
      "pb"    '(preview-buffer :which-key "buffer")
      "pd"    '(preview-document :which-key "document")
      "pe"    '(preview-environment :which-key "environment")
      "pf"    '(preview-cache-preamble :which-key "cache preamble")
      "pF"    '(preview-cache-preamble-off :which-key "cache preamble off")
      "pp"    '(preview-at-point :which-key "at point")
      "pr"    '(preview-region :which-key "region")
      "ps"    '(preview-section :which-key "section")
      "pc" '(:ignore :which-key "clearout")
      "pcb" '(preview-clearout-buffer :which-key "buffer")
      "pcd" '(preview-clearout-document :which-key "document")
      "pcp" '(preview-clearout-at-point :which-key "at")
      "pcr" '(preview-clearout :which-key "clearout")
      "pcs" '(preview-clearout-section :which-key "section"))
    )
#+end_src

*** LatexMk support
#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup))
#+end_src

** TRAMP
Configurations for =TRAMP=.
#+begin_src emacs-lisp
  (use-package tramp
    :straight (:type built-in)
    :config
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
    (setq inhibit-eol-conversion t))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (add-to-list 'yas-snippet-dirs (concat user-emacs-directory "snippets/"))
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets
    :after yasnippet)

  (general-define-key
   :keymaps 'yas-minor-mode-map
   "TAB" nil
   "<backtab>" #'yas-expand)
  #+end_src

* TODOs
- Custom splash screen with vertical centering and theme appropriate fancy splash image 
- Eshell
- Dired
- Restart
  
