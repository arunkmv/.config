#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle init.el :comments link

This is my literate configuration for Emacs.

* Installation
Please run the following to generate init.el when initially setting up emacs.
#+begin_src shell :tangle no
emacs --batch --eval "(progn (require 'org) (setq org-confirm-babel-evaluate nil) (org-babel-tangle-file \"~/.config/doom/config.org\"))"
#+end_src

* Startup
Turn on lexical binding in init.el
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
#+end_src

Reduce garbage collection frequency for faster startup and use a hook to measure Emacs startup time.
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Package management
Define local directory.
#+begin_src emacs-lisp
(defconst ak/local-dir
  (concat user-emacs-directory ".local/")
  "Directory local storage")
#+end_src

Using =straight.el= for package management.
#+begin_src emacs-lisp
  (setq straight-base-dir (file-truename ak/local-dir))
#+end_src

Bootstrap straight.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" ak/local-dir))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Use straight to install packages by default and in use-package expressions.
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
#+end_src

** Keep .emacs.d clean
Define cache directories.
#+begin_src emacs-lisp
(defconst ak/etc-dir
  (concat ak/local-dir "etc/"))

(defconst ak/var-dir
  (concat ak/local-dir "var/"))
#+end_src

No littering
#+begin_src emacs-lisp
  (use-package no-littering
    :init
    (setq no-littering-etc-directory ak/etc-dir
	  no-littering-var-directory ak/var-dir))
#+end_src

** Update load path
#+begin_src emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "lisp/"))
#+end_src

* Keybindings
Core configurations for keybindings.
** Undo tree
Use =undo-tree= for vim-like undo.
#+begin_src emacs-lisp
(use-package undo-tree
  :init
  (global-undo-tree-mode 1))
#+end_src

** Evil mode
Vim keys in Emacs using =evil=.
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
	  evil-want-keybinding nil
	  evil-want-C-i-jump nil
	  evil-respect-visual-line-mode t
	  evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (setq-default
     evil-emacs-state-tag          " E "
     evil-normal-state-tag         " N "
     evil-insert-state-tag         " I "
     evil-visual-char-tag          " V "
     evil-visual-line-tag          " VL "
     evil-visual-screen-line-tag   " VSL "
     evil-visual-block-tag         " VB "
     evil-motion-state-tag         " M "
     evil-operator-state-tag       " O "
     evil-replace-state-tag        " R "))
#+end_src

=evil-collection= provides better evil bindings for different major modes.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
  :config
  (evil-collection-init))
#+end_src

Use =evil-snipe= for better motion.
#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (setq evil-snipe-scope 'line
	  evil-snipe-repeat-scope 'visible)
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))
#+end_src

Use =evil-anzu= for better search highlighting.
#+begin_src emacs-lisp
  (use-package evil-anzu
    :config
    (global-anzu-mode +1))
#+end_src

** Which key
Keybinding helper for quick reference with =which-key=.
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Prefix keybinding
Use =general.el= for prefixed keybinding.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer ak/leader-key-def
      :states 'normal
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer ak/local-leader-key-def
      :prefix "SPC m")


    (general-create-definer ak/ctrl-c-key-def
      :prefix "C-c"))
#+end_src

** Convenient bindings
Setup convenient bindings and other which key prefixes.
#+begin_src emacs-lisp
  (general-def help-map
    "F" 'describe-face)

  (ak/leader-key-def
    "." '(find-file :which-key "Find file")
    "," '(consult-buffer :which-key "Switch persp buffer")
    "u" '(universal-argument :which-key "Universal argument")
    "g" '(:ignore t :which-key "git")
    "h" '(:keymap help-map :which-key "help")
    "m" '(:ignore t :which-key "local leader")
    "o" '(:ignore t :which-key "open")
    "t" '(:ignore t :which-key "toggle"))
#+end_src

*** Reload init.el
#+begin_src emacs-lisp
  (defun reload-init-file ()
    "Reload init.el"
    (interactive)
    (org-babel-tangle (expand-file-name "README.org" user-emacs-directory))
    (load-file (expand-file-name "init.el" user-emacs-directory))
    (message "init.el reloaded"))

  (ak/ctrl-c-key-def
   "l" 'reload-init-file)
#+end_src

** MacOS
Key modifiers for macOS.
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq
     ns-command-modifier 'meta
     ns-right-option-modifier 'control
     ns-option-modifier 'super
     ns-control-modifier 'control
     ns-function-modifier 'hyper))
#+end_src

* UI
** Fonts and icons
Set font and size.
#+begin_src emacs-lisp
 (set-face-attribute 'default nil
                       :font "Source Code Pro"
                       :weight 'Regular
                       :height 170)
#+end_src

Use =all-the-icons=.
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** Clean up Emacs UI
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(menu-bar-mode -1)
#+end_src

** Frame size
Always fullscreen.
#+begin_src emacs-lisp
(set-frame-parameter nil 'fullscreen 'fullboth)
  ;;(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Keybinding to toggle fullscreen.
#+begin_src emacs-lisp
  (ak/leader-key-def
    "tF" '(toggle-frame-fullscreen :which-key "Fullscreen"))
#+end_src

** Date and time
Set date and time display format.
#+begin_src emacs-lisp
  (setq display-time-day-and-date t
	display-time-format "%a %b %d %I:%M%p"
	display-time-default-load-average nil)
  (display-time-mode +1)
#+end_src

** Battery
Use =fancy-battery= for a nicer battery display
#+begin_src emacs-lisp
  (use-package fancy-battery
    :hook (after-init . fancy-battery-mode)
    :config
    (setq fancy-battery-show-percentage t))
#+end_src

** Don't ring the bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Dashboard
Setup a minimal dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (dashboard-setup-startup-hook)
    :config
    (setq dashboard-banner-logo-title "Welcome to Emacs"
	  dashboard-startup-banner (expand-file-name "emacs.png" user-emacs-directory)
	  dashboard-center-content t
	  dashboard-show-shortcuts nil
	  dashboard-items '()
	  initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-insert-startupify-lists))
#+end_src

** Theme
Trying out =modus-themes=.
#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs nil
	  modus-themes-syntax '(green-strings)
	  modus-themes-prompts '(bold intense)
	  modus-themes-completions
	  '((matches . (extrabold background))
	    (selection . (semibold accented))
	    (popup . (extrabold)))
	  modus-themes-headings
	  '((1 . (background overline rainbow 1.25))
	    (2 . (background rainbow 1.1))
	    (3 . (background rainbow 1.05))
	    (t . (rainbow))))
    (modus-themes-load-themes)
    :config
    (modus-themes-load-vivendi))

  (ak/leader-key-def
    "tt" '(modus-themes-toggle :which-key "Modus themes"))
#+end_src

** Modeline
Setup and configure =doom-modeline=.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :after (modus-themes)
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-encoding nil
	  doom-modeline-major-mode-icon t
	  doom-modeline-modal-icon nil)
    ;; Show text column number in modeline
    (column-number-mode)
#+end_src

Remove doom-modeline battery hooks to display battery status in tab bar.
#+begin_src emacs-lisp
    (remove-hook 'display-battery-mode-hook 'doom-modeline-override-battery-modeline)
    (remove-hook 'doom-modeline-mode-hook 'doom-modeline-override-battery-modeline))
#+end_src

Change faces of modeline evil indicators.
#+begin_src emacs-lisp
  (defun ak/doom-modeline-evil-indicator-set-colors-h ()
    (set-face-attribute 'doom-modeline-evil-emacs-state    nil :background (modus-themes-color 'magenta)         :foreground (modus-themes-color 'bg-main))
    (set-face-attribute 'doom-modeline-evil-normal-state   nil :background (modus-themes-color 'green)           :foreground (modus-themes-color 'bg-main))
    (set-face-attribute 'doom-modeline-evil-insert-state   nil :background (modus-themes-color 'blue)            :foreground (modus-themes-color 'bg-main))
    (set-face-attribute 'doom-modeline-evil-visual-state   nil :background (modus-themes-color 'orange-intense)  :foreground (modus-themes-color 'bg-main))
    (set-face-attribute 'doom-modeline-evil-motion-state   nil :background (modus-themes-color 'red-intense)     :foreground (modus-themes-color 'fg-main))
    (set-face-attribute 'doom-modeline-evil-operator-state nil :background (modus-themes-color 'yellow-intense)  :foreground (modus-themes-color 'bg-main))
    (set-face-attribute 'doom-modeline-evil-replace-state  nil :background (modus-themes-color 'magenta-intense) :foreground (modus-themes-color 'fg-main)))

  (add-hook 'doom-modeline-mode-hook 'ak/doom-modeline-evil-indicator-set-colors-h)
  (add-hook 'modus-themes-after-load-theme-hook 'ak/doom-modeline-evil-indicator-set-colors-h)
#+end_src

*** Hide modeline
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :hook ((vterm-mode eshell-mode) . hide-mode-line-mode)
    :config
    (ak/leader-key-def
      "tm" '(hide-mode-line-mode :which-key "Modeline")))
#+end_src

** Tab bar
Use the tab bar as a global modeline.
#+begin_src emacs-lisp
  (setq tab-bar-format '(tab-bar-format-align-right tab-bar-format-global)
	auto-resize-tab-bars nil)
  (tab-bar-mode +1)
#+end_src

Properly format global mode string as it is used by the tab bar.
#+begin_src emacs-lisp
  (defun ak/format-global-mode-string ()
    "Format `global-mode-string' to display perspective, time and battery"
    (setq global-mode-string '("" (:eval (persp-mode-line)) " | " display-time-string "| " fancy-battery-mode-line " |")))

  (add-hook 'after-init-hook #'ak/format-global-mode-string)
#+end_src

*** Toggle tab bar
#+begin_src emacs-lisp
    (ak/leader-key-def
      "tb" '(tab-bar-mode :which-key "Tab bar"))
#+end_src

** Better scrolling
Add smooth scrolling and mouse scroll support.
#+begin_src emacs-lisp
  (setq scroll-step 1
	mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
	mouse-wheel-progressive-speed nil            ;; don't accelerate scrolling
	mouse-wheel-follow-mouse 't)                 ;; scroll window under mouse
#+end_src

Add keybindings for scrolling other window. Useful for [[*Embark][Embark]].
#+begin_src emacs-lisp
  (general-define-key
   "C->" 'scroll-other-window
   "C-<" 'scroll-other-window-down)
#+end_src

** Highlight cursor
=pulsar= to highlight cursor location.
#+begin_src emacs-lisp
  (use-package pulsar
    :config
    (setq pulsar-pulse-on-window-change t)
    (setq pulsar-delay 0.06)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'pulsar-generic))
#+end_src

** Line numbers
Configure display line numbers.
#+begin_src emacs-lisp
    (setq-default display-line-numbers-width 3)
    (setq-default display-line-numbers-type 'relative)
    (setq-default display-line-numbers-widen t)
    (dolist (mode '(text-mode-hook
		    prog-mode-hook
		    conf-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

*** Toggle line numbers
Function to toggle display line numbers.
#+begin_src emacs-lisp
  (defun ak/toggle-line-numbers ()
    "Toggle line numbers.

  Cycles through regular, relative and no line numbers. The order depends on what
  `display-line-numbers-type' is set to. If you're using Emacs 26+, and
  visual-line-mode is on, this skips relative and uses visual instead.

  See `display-line-numbers' for what these values mean."
    (interactive)
    (defvar ak/line-number-style display-line-numbers-type)
    (let* ((styles `(t ,(if visual-line-mode 'visual 'relative) nil))
	   (order (cons display-line-numbers-type (remq display-line-numbers-type styles)))
	   (queue (memq ak/line-number-style order))
	   (next (if (= (length queue) 1)
		     (car order)
		   (car (cdr queue)))))
      (setq ak/line-number-style next)
      (setq display-line-numbers next)
      (message "Switched to %s line numbers"
	       (pcase next
		 (`t "normal")
		 (`nil "disabled")
		 (_ (symbol-name next))))))

  (ak/leader-key-def
    "tl" '(ak/toggle-line-numbers :which-key "Line numbers"))
#+end_src

* Completion
** Vertico
A streamlined minimal and performant completion with =vertico.el=
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
	   ("C-j" . vertico-next)
	   ("C-k" . vertico-previous)
	   ("M-RET" . vertico-exit-input)
	   :map minibuffer-local-map
	   ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (setq vertico-resize nil)
    (vertico-mode))
#+end_src

*** Savehist
Persist minibuffer history over Emacs restarts with =savehist=.
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

** Marginalia
=marginalia= for helpful annotations for various types of minibuffer completions.
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

** Orderless
=orderless= completion style.
#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Consult
=consult.el= for practical completing-read commands.
#+begin_src emacs-lisp
    (use-package consult
      :after (perspective)
      :config
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources persp-consult-source)
      (add-to-list 'consult-buffer-filter "^\\*.*\\*$"))
#+end_src

** Embark
Completing actions with =embark=
#+begin_src emacs-lisp
    (use-package embark
      :ensure t
      :bind (("C-;" . embark-act)
	     ("C-:" . embark-dwim)
	     ("C-h B" . embark-bindings))
      :init
      (setq prefix-help-command #'embark-prefix-help-command)
      :config
      (setq embark-verbose-indicator-display-action '(display-buffer-at-bottom)))

    (use-package embark-consult
      :after embark)
#+end_src

** All the icons completion
#+begin_src emacs-lisp
(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src

* Windows
** Text scaling
Scale text with =C-M--= and =C-M-==
#+begin_src emacs-lisp
(use-package default-text-scale
  :defer 1
  :config
  (default-text-scale-mode))
#+end_src

** Ace window
=ace-window= for easily switching between windows.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (:map evil-window-map
		("a" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (setq aw-dispatch-always t)
    (ace-window-display-mode 1))
#+end_src

** Winner
Window history with =winner=.
#+begin_src emacs-lisp
  (use-package winner
    :bind (:map evil-window-map
		("u" . winner-undo)
		("U" . winner-redo))
    :config
    (winner-mode))
#+end_src

** Keybindings
Bind evil window keys to global prefix.
#+begin_src emacs-lisp
  (ak/leader-key-def
    "w" '(:package evil :keymap evil-window-map :which-key "window"))

  (general-define-key
   :keymaps 'evil-window-map
   "d" 'evil-window-delete
   "c" nil)
#+end_src

** Popper
Taming popups with =popper.el=
#+begin_src emacs-lisp
  (use-package popper
    :ensure t ; or :straight t
    :bind (("C-`"   . popper-toggle-latest)
	   ("M-`"   . popper-cycle)
	   ("C-M-`" . popper-toggle-type))
    :custom
    (popper-window-height 12)
    :init
    (setq popper-reference-buffers
	  '("\\*Messages\\*"
	    "Output\\*$"
	    "\\*Async Shell Command\\*"
	    "^\\*vterm-popup.*\\*$"
	    "^\\*scratch.*\\*$"
	    help-mode
	    helpful-mode
	    compilation-mode)
	  popper-mode-line 1)
    (popper-mode 1)
    (popper-echo-mode 1)) 
#+end_src

* Buffers and workspaces
** Perspective
Workspaces with =perspective=.
#+begin_src emacs-lisp
      (use-package perspective
	:demand t
	:custom
	(persp-initial-frame-name "main")
	:config
	(setq persp-suppress-no-prefix-key-warning t
	      persp-show-modestring t
	      persp-modestring-short t
	      persp-sort 'created)
#+end_src

*** Display perspectives.
#+begin_src emacs-lisp
  (defun ak/persp-display ()
    "Display numbered perspectives tabs at the bottom of the screen"
    (interactive)
    (let* ((persps (persp-names))
	   (current-persp (persp-current-name))
	   (tab-line (mapconcat
		      #'identity
		      (cl-loop for persp in persps
			       for i to (length persps)
			       collect
			       (propertize (format " [%d] %s " (1+ i) persp)
					   'face (if (equal current-persp persp)
						     'highlight
						   'default)))
		      " ")))
      (message "%s" tab-line)))

  (add-hook 'persp-switch-hook #'ak/persp-display)
#+end_src

*** Kill the current perspective.
#+begin_src emacs-lisp
  (defun ak/persp-kill-current ()
    "Kill the current perspective in the frame"
    (interactive)
    (persp-kill (persp-current-name)))
#+end_src

*** Prettify short persp modestring displayed in the tab-bar.
#+begin_src emacs-lisp
  (defun ak/persp-format-modestring-short (modestring)
    "Format short `persp-mode-line' for prettier display"
    (if persp-modestring-short
	(let ((open (nth 0 modestring))
	      (name (nth 1 modestring))
	      (close (nth 2 modestring)))
	  (list open
		(propertize name 'face 'persp-selected-face)
		close))
      modestring))

  (advice-add 'persp-mode-line :filter-return #'ak/persp-format-modestring-short)
#+end_src

*** Dashboard in new perspectives
Advice function to return the dashboard buffer instead of scratch when a new perspective is opened.
#+begin_src emacs-lisp
  (defun ak/persp-get-dashboard-buffer (&optional name)
    "Return existing dashboard buffer or create new if none exists"
    (let* ((buffer-name dashboard-buffer-name)
	   (buffer (get-buffer buffer-name)))
      (unless buffer
	(setq buffer (get-buffer-create buffer-name))
	(with-current-buffer buffer
	  (when (eq major-mode 'fundamental-mode)
	    (funcall 'dashboard-mode))
	  (dashboard-refresh-buffer)))
      buffer))

  (advice-add 'persp-get-scratch-buffer :override #'ak/persp-get-dashboard-buffer)
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (general-def perspective-map
    "TAB" 'ak/persp-display
    "d" 'ak/persp-kill-current)

  (ak/leader-key-def
    "TAB" '(:keymap perspective-map :which-key "workspace"))
#+end_src

*** Turn on perspective
#+begin_src emacs-lisp
	;; Running `persp-mode' multiple times resets the perspective list...
	(unless (equal persp-mode t)
	  (persp-mode)))
#+end_src

** Save place
Turn on =save-place-mode=.
#+begin_src emacs-lisp
  (save-place-mode 1) 
#+end_src

** Scratch buffer
Require custom scratch buffer utility.
#+begin_src emacs-lisp
(require 'ak-scratch)
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (ak/leader-key-def
    "b" '(:ignore t :which-key "buffer")
    "bd" '(kill-current-buffer :which-key "Kill buffer")
    "bx" '(ak/open-scratch-buffer :which-key "Open scratch buffer")
    "bX" '(ak/switch-to-scratch-buffer :which-key "Switch to scratch buffer"))
#+end_src

* Development
** Magit
Easy git management with =magit=.
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (ak/leader-key-def
    "gg"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)
#+end_src

** Git Gutter
View file changes with the =git-gutter=.
#+begin_src emacs-lisp
  (use-package git-gutter
    :disabled
    :hook ((text-mode . git-gutter-mode)
	   (prog-mode . git-gutter-mode))
    )
#+end_src

Prettier gutter with =git-gutter-fringe=.
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :disabled
    :config
    (if (fboundp 'fringe-mode) (fringe-mode '4))
    ;; places the git gutter outside the margins.
    (setq-default fringes-outside-margins t)
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

  (defun ak/git-gutter-fringe-set-colors-h ()
    (set-face-foreground 'git-gutter-fr:modified (modus-themes-color 'yellow-intense))
    (set-face-foreground 'git-gutter-fr:added    (modus-themes-color 'green-intense))
    (set-face-attribute 'git-gutter-fr:deleted nil :foreground (modus-themes-color 'red-intense-bg) :background (modus-themes-color 'red-intense))

    (add-hook 'git-gutter-mode-on-hook 'ak/git-gutter-fringe-set-colors-h)
    (add-hook 'modus-themes-after-load-theme-hook 'ak/git-gutter-fringe-set-colors-h))

#+end_src

** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    (prog-mode . diff-hl-mode)
    (text-mode . diff-hl-mode)
    (dired-mode . diff-hl-dired-mode)
    :config
    (if (fboundp 'fringe-mode) (fringe-mode '4))
    (setq diff-hl-draw-borders nil)
    (setq diff-hl-side 'left))
#+end_src

** Projects
*** Projectile
Working on projects with =projectile=.
#+begin_src emacs-lisp
    (use-package projectile
      :init
      (when (file-directory-p "~/Projects")
	(setq projectile-project-search-path '("~/Projects")
	      projectile-track-known-projects-automatically nil))
      :config
      (defun ak/project-root (&optional dir)
	"Return the project root of DIR (defaults to `default-directory').
	    Returns nil if not in a project."
	(let ((projectile-project-root
	       (unless dir (bound-and-true-p projectile-project-root)))
	      projectile-require-project-root)
	  (projectile-project-root dir)))

      (defun ak/project-name (&optional dir)
	"Return the name of the current project.
    Returns '-' if not in a valid project."
	(if-let (project-root (or (ak/project-root dir)
				  (if dir (expand-file-name dir))))
	    (funcall projectile-project-name-function project-root)
	  "-"))
      (projectile-mode))

#+end_src

*** Perspective integration
Bridge between perspective and projectile.
#+begin_src emacs-lisp
  (use-package persp-projectile
    :straight (persp-projectile :type git :host github :repo "bbatsov/persp-projectile" :branch "master"))
#+end_src

*** Consult projectile
#+begin_src emacs-lisp
    (use-package consult-projectile
      :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
      :config
      (setq consult-projectile-source-projectile-project-action #'projectile-persp-switch-project))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'projectile-mode-map
   [remap projectile-switch-project] 'consult-projectile-switch-project
   [remap projectile-find-file] 'consult-projectile-find-file
   [remap projectile-switch-to-buffer] 'consult-projectile-switch-to-buffer)

  (ak/leader-key-def
    "p" '(:package projectile :keymap projectile-command-map :which-key "projects")
    "SPC" '(consult-projectile-find-file :which-key "Find file in project")
    "pa" '(projectile-add-known-project :which-key "Add to known projects")
    "px" '(ak/open-project-scratch-buffer :which-key "Open project scratch buffer")
    "pX" '(ak/switch-to-project-scratch-buffer :which-key "Switch to project scratch buffer"))
#+end_src

** Prog mode
*** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((org-mode prog-mode) . rainbow-delimiters-mode))
#+end_src

*** Emacs Lisp
**** Elisp def
#+begin_src emacs-lisp
  (use-package elisp-def
    :hook (emacs-lisp-mode . elisp-def-mode)
    :config
    (general-define-key
     :keymaps 'emacs-lisp-mode-map
     "gd" 'elisp-def)
    (general-define-key
     :keymaps 'embark-symbol-map
     "d" 'elisp-def))
#+end_src

* Org Mode
** UI
**** Org modern
Using =org-modern= for a nicer org UI.
#+begin_src emacs-lisp
  (use-package org-modern
    :init
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
    :config
    (setq org-modern-block nil))
#+end_src

**** Custom faces
#+begin_src emacs-lisp
  (set-face-attribute 'org-document-title nil :foreground (modus-themes-color 'green) :height 1.8)
#+end_src

** Block templates
Easy org block templates. Type <s and =TAB= for source block.
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

** Consult org headings
#+begin_src emacs-lisp
  (ak/local-leader-key-def
   :states 'normal
   :keymaps 'org-mode-map
   "h" 'consult-org-heading)
#+end_src

* Tools and packages
Configurations for various tools and packages.
** Dired
#+begin_src emacs-lisp
 
#+end_src

** Helpful
Better help buffers with =helpful=.
#+begin_src emacs-lisp
  (use-package helpful
    :hook (helpful-mode . visual-line-mode)
    :init
    (global-set-key [remap describe-function] #'helpful-callable)
    (global-set-key [remap describe-command]  #'helpful-command)
    (global-set-key [remap describe-variable] #'helpful-variable)
    (global-set-key [remap describe-key]      #'helpful-key)
    (global-set-key [remap describe-symbol]   #'helpful-symbol)
    :config
    (general-define-key
     :keymaps 'embark-symbol-map
     [remap describe-symbol] 'helpful-symbol))
#+end_src

** Pdf Tools
Reading pdfs with =pdf-tools=.
#+begin_src emacs-lisp
    (use-package pdf-tools
      :config
      (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
      (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
      (setq-default pdf-view-display-size 'fit-page)
      (setq pdf-view-use-scaling t
	    pdf-view-use-imagemagick nil
	    pdf-view-midnight-colors '("#ebdbb2" . "#282828"))
      ;; Fix flickering pdfs when evil-mode is enabled
      (add-hook 'pdf-view-mode-hook #'(lambda () (setq-local evil-normal-state-cursor (list nil)))))
#+end_src

** Nov
Reading ebooks with =nov.el=.
#+begin_src emacs-lisp
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    (add-hook 'nov-mode-hook 'visual-line-mode)
    (setq nov-text-width 80))
#+end_src

** Avy
Jumping around with =avy=.
#+begin_src emacs-lisp
  (use-package avy
    :config
    (setq avy-background t
	  avy-single-candidate-jump nil)
    (general-define-key
     :states 'normal
     :keymaps 'global
     "gs" 'avy-goto-char-timer)
#+end_src

*** Embark integration
#+begin_src emacs-lisp
  (defun ak/avy-action-embark (pt)
    "Avy action to call embark-act"
    (unwind-protect
	(save-excursion
	  (goto-char pt)
	  (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)
  (setf (alist-get ?. avy-dispatch-alist) 'ak/avy-action-embark))
#+end_src

** Vterm
Better terminal emulation with =vterm=.
#+begin_src emacs-lisp
  (use-package vterm
    :after evil-collection
    :commands (vterm ak/vterm-toggle ak/vterm-here)
    :config
    (setq vterm-max-scrollback 10000)
    (advice-add 'evil-collection-vterm-insert :before #'vterm-reset-cursor-point)
#+end_src

*** Perspective aware vterm popups
#+begin_src emacs-lisp
    (defun ak/vterm-configure-project-root-and-display (arg display-fn)
      "Sets the environment variable PROOT and displays a terminal using `display-fn`.
    If prefix ARG is non-nil, cd into `default-directory' instead of project root.
    Returns the vterm buffer."
      (unless (fboundp 'module-load)
	(user-error "Your build of Emacs lacks dynamic modules support and cannot load vterm"))
      (let* ((project-root (or (ak/project-root) default-directory))
	     (default-directory
	       (if arg
		   default-directory
		 project-root)))
	(setenv "PROOT" project-root)
	(funcall display-fn)))

      (defun ak/vterm-toggle (arg)
	"Toggles a terminal popup window at project root.
      If prefix ARG is non-nil, recreate vterm buffer in the default directory.
      Returns the vterm buffer."
	(interactive "P")
	(ak/vterm-configure-project-root-and-display
	 arg
	 (lambda()
	   (let ((buffer-name
		  (format "*vterm-popup:%s*"
			  (if (bound-and-true-p persp-mode)
			      (persp-current-name)
			    "main")))
		 confirm-kill-processes
		 current-prefix-arg)
	     (when arg
	       (let ((buffer (get-buffer buffer-name))
		     (window (get-buffer-window buffer-name)))
		 (when (buffer-live-p buffer)
		   (kill-buffer buffer))
		 (when (window-live-p window)
		   (delete-window window))))
	     (if-let (win (get-buffer-window buffer-name))
		 (delete-window win)
	       (let ((buffer (get-buffer-create buffer-name)))
		 (with-current-buffer buffer
		   (unless (eq major-mode 'vterm-mode)
		     (vterm-mode)))
		 (pop-to-buffer buffer)))
	     (get-buffer buffer-name)))))
#+end_src

*** Vterm anywhere
Open vterm in project root or default directory.
#+begin_src emacs-lisp
  (defun ak/vterm-here (arg)
    "Open a terminal buffer in the current window at project root.
  If prefix ARG is non-nil, cd into `default-directory' instead of project root.
  Returns the vterm buffer."
    (interactive "P")
    (ak/vterm-configure-project-root-and-display
     arg
     (lambda()
       (let (display-buffer-alist)
	 (vterm vterm-buffer-name))))))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (ak/leader-key-def
    "ot" 'ak/vterm-toggle
    "oT" 'ak/vterm-here)
#+end_src

* TODOs
- Use doom emacs strategy with [[https://gitlab.com/koral/gcmh/][gcmh-mode]]
- Custom splash screen with vertical centering and theme appropriate fancy splash image 
  
